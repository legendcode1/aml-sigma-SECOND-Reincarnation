{
    "sourceFile": "parrot-aml/src/auth/auth.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 87,
            "patches": [
                {
                    "date": 1736966845685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736967418645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,40 +1,49 @@\n-// auth.js\r\n-import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, sendEmailVerification } from \"firebase/auth\";\r\n+import { initializeApp } from \"firebase/app\";\r\n+import { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\r\n \r\n-// Allowed email domains\r\n-const allowedDomains = ['sinergi.com', 'datum.com'];\r\n+// Firebase configuration\r\n+const firebaseConfig = {\r\n+  apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n+  authDomain: \"datumcorp-aml.firebaseapp.com\",\r\n+  projectId: \"datumcorp-aml\",\r\n+  storageBucket: \"datumcorp-aml.firebasestorage.app\",\r\n+  messagingSenderId: \"710428028162\",\r\n+  appId: \"1:710428028162:web:486e3aad77de49d0d8261b\",\r\n+  measurementId: \"G-KSL9Y2V3HX\"\r\n+};\r\n \r\n-const isValidDomain = (email) => {\r\n-  const domain = email.split('@')[1];\r\n-  return allowedDomains.includes(domain);\r\n+// Initialize Firebase\r\n+const app = initializeApp(firebaseConfig);\r\n+const auth = getAuth(app);\r\n+\r\n+// Domain-to-client_id mapping\r\n+const domainClientMapping = {\r\n+  'sinergi.com': 'client-id-sinergi',\r\n+  'datum.com': 'client-id-datum'\r\n };\r\n \r\n-export const handleLogin = async (email, password) => {\r\n-  if (!isValidDomain(email)) {\r\n-    alert('This email domain is not allowed.');\r\n-    return;\r\n+// Function to handle login\r\n+export const loginUser = async (email, password) => {\r\n+  const domain = email.split('@')[1]; // Extract the domain part of the email\r\n+\r\n+  // Check if the domain is valid\r\n\\ No newline at end of file\n+  if (!domainClientMapping[domain]) {\r\n+    throw new Error('This email domain is not allowed.');\r\n   }\r\n \r\n-  const auth = getAuth();\r\n+  const client_id = domainClientMapping[domain]; // Get the client_id based on the domain\r\n+\r\n   try {\r\n-    await signInWithEmailAndPassword(auth, email, password);\r\n-  } catch (error) {\r\n-    console.error('Login Error:', error.message);\r\n-  }\r\n-};\r\n+    // Authenticate the user with Firebase\r\n+    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n+    const user = userCredential.user;\r\n \r\n-export const handleSignUp = async (email, password) => {\r\n-  if (!isValidDomain(email)) {\r\n-    alert('This email domain is not allowed.');\r\n-    return;\r\n-  }\r\n+    // Store the client_id for the session (use localStorage, React context, etc.)\r\n+    localStorage.setItem('client_id', client_id);\r\n \r\n-  const auth = getAuth();\r\n-  try {\r\n-    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n-    await sendEmailVerification(userCredential.user);\r\n-    console.log('Verification email sent!');\r\n+    // Return user data (or redirect, or whatever you need)\r\n+    return user;\r\n   } catch (error) {\r\n-    console.error('Sign-Up Error:', error.message);\r\n+    throw new Error('Login failed: ' + error.message);\r\n   }\r\n-};\n+};\r\n"
                },
                {
                    "date": 1736968584434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,8 @@\n-import { initializeApp } from \"firebase/app\";\r\n-import { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\r\n+// Import the already initialized Firebase app and authentication services\r\n+import { getAuth } from \"firebase/auth\";\r\n+import { app } from './firebase';  // Import the app from your firebase.js file\r\n \r\n-// Firebase configuration\r\n-const firebaseConfig = {\r\n-  apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n-  authDomain: \"datumcorp-aml.firebaseapp.com\",\r\n-  projectId: \"datumcorp-aml\",\r\n-  storageBucket: \"datumcorp-aml.firebasestorage.app\",\r\n-  messagingSenderId: \"710428028162\",\r\n-  appId: \"1:710428028162:web:486e3aad77de49d0d8261b\",\r\n-  measurementId: \"G-KSL9Y2V3HX\"\r\n-};\r\n-\r\n-// Initialize Firebase\r\n-const app = initializeApp(firebaseConfig);\r\n-const auth = getAuth(app);\r\n-\r\n // Domain-to-client_id mapping\r\n const domainClientMapping = {\r\n   'sinergi.com': 'client-id-sinergi',\r\n   'datum.com': 'client-id-datum'\r\n@@ -31,8 +17,9 @@\n     throw new Error('This email domain is not allowed.');\r\n   }\r\n \r\n   const client_id = domainClientMapping[domain]; // Get the client_id based on the domain\r\n+  const auth = getAuth(app);  // Get the authentication service using the imported app\r\n \r\n   try {\r\n     // Authenticate the user with Firebase\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n@@ -45,5 +32,6 @@\n     return user;\r\n   } catch (error) {\r\n     throw new Error('Login failed: ' + error.message);\r\n   }\r\n-};\n\\ No newline at end of file\n+};\r\n+vvvvvvvvvvv\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736969274515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // Import the already initialized Firebase app and authentication services\r\n import { getAuth } from \"firebase/auth\";\r\n-import { app } from './firebase';  // Import the app from your firebase.js file\r\n+import { app } from '../firebase.jsx';  // Import the app from your firebase.js file\r\n \r\n // Domain-to-client_id mapping\r\n const domainClientMapping = {\r\n   'sinergi.com': 'client-id-sinergi',\r\n"
                },
                {
                    "date": 1736970684757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+// Import the already initialized Firebase app and authentication services\r\n+import { getAuth } from \"firebase/auth\";\r\n+import { app } from '../firebase.js';  // Import the app from your firebase.js file\r\n+\r\n+// Domain-to-client_id mapping\r\n+const domainClientMapping = {\r\n+  'sinergi.com': 'client-id-sinergi',\r\n+  'datum.com': 'client-id-datum'\r\n+};\r\n+\r\n+// Function to handle login\r\n+export const loginUser = async (email, password) => {\r\n+  const domain = email.split('@')[1]; // Extract the domain part of the email\r\n+\r\n+  // Check if the domain is valid\r\n+  if (!domainClientMapping[domain]) {\r\n+    throw new Error('This email domain is not allowed.');\r\n+  }\r\n+\r\n+  const client_id = domainClientMapping[domain]; // Get the client_id based on the domain\r\n+  const auth = getAuth(app);  // Get the authentication service using the imported app\r\n+\r\n+  try {\r\n+    // Authenticate the user with Firebase\r\n+    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n+    const user = userCredential.user;\r\n+\r\n+    // Store the client_id for the session (use localStorage, React context, etc.)\r\n+    localStorage.setItem('client_id', client_id);\r\n+\r\n+    // Return user data (or redirect, or whatever you need)\r\n+    return user;\r\n+  } catch (error) {\r\n+    throw new Error('Login failed: ' + error.message);\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1736970761302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { app } from '../firebase.js';  // Import the app from your firebase.js file\r\n \r\n // Domain-to-client_id mapping\r\n const domainClientMapping = {\r\n-  'sinergi.com': 'client-id-sinergi',\r\n+  'transinergi.com': 'client-id-transinergi',\r\n   'datum.com': 'client-id-datum'\r\n };\r\n \r\n // Function to handle login\r\n@@ -33,41 +33,4 @@\n   } catch (error) {\r\n     throw new Error('Login failed: ' + error.message);\r\n   }\r\n };\r\n-// Import the already initialized Firebase app and authentication services\r\n-import { getAuth } from \"firebase/auth\";\r\n-import { app } from '../firebase.jsx';  // Import the app from your firebase.js file\r\n-\r\n-// Domain-to-client_id mapping\r\n-const domainClientMapping = {\r\n-  'sinergi.com': 'client-id-sinergi',\r\n-  'datum.com': 'client-id-datum'\r\n-};\r\n-\r\n-// Function to handle login\r\n-export const loginUser = async (email, password) => {\r\n-  const domain = email.split('@')[1]; // Extract the domain part of the email\r\n-\r\n-  // Check if the domain is valid\r\n-  if (!domainClientMapping[domain]) {\r\n-    throw new Error('This email domain is not allowed.');\r\n-  }\r\n-\r\n-  const client_id = domainClientMapping[domain]; // Get the client_id based on the domain\r\n-  const auth = getAuth(app);  // Get the authentication service using the imported app\r\n-\r\n-  try {\r\n-    // Authenticate the user with Firebase\r\n-    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n-    const user = userCredential.user;\r\n-\r\n-    // Store the client_id for the session (use localStorage, React context, etc.)\r\n-    localStorage.setItem('client_id', client_id);\r\n-\r\n-    // Return user data (or redirect, or whatever you need)\r\n-    return user;\r\n-  } catch (error) {\r\n-    throw new Error('Login failed: ' + error.message);\r\n-  }\r\n-};\r\n-vvvvvvvvvvv\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736970884322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,22 @@\n-// Import the already initialized Firebase app and authentication services\r\n-import { getAuth } from \"firebase/auth\";\r\n-import { app } from '../firebase.js';  // Import the app from your firebase.js file\r\n+import { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\r\n+import { initializeApp } from \"firebase/app\";\r\n \r\n+// Firebase configuration\r\n+const firebaseConfig = {\r\n+  apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n+  authDomain: \"datumcorp-aml.firebaseapp.com\",\r\n+  projectId: \"datumcorp-aml\",\r\n+  storageBucket: \"datumcorp-aml.appspot.com\",\r\n+  messagingSenderId: \"710428028162\",\r\n+  appId: \"1:710428028162:web:486e3aad77de49d0d8261b\",\r\n+  measurementId: \"G-KSL9Y2V3HX\"\r\n+};\r\n+\r\n+// Initialize Firebase\r\n+const app = initializeApp(firebaseConfig);\r\n+const auth = getAuth(app);\r\n+\r\n // Domain-to-client_id mapping\r\n const domainClientMapping = {\r\n   'transinergi.com': 'client-id-transinergi',\r\n   'datum.com': 'client-id-datum'\r\n@@ -17,9 +31,8 @@\n     throw new Error('This email domain is not allowed.');\r\n   }\r\n \r\n   const client_id = domainClientMapping[domain]; // Get the client_id based on the domain\r\n-  const auth = getAuth(app);  // Get the authentication service using the imported app\r\n \r\n   try {\r\n     // Authenticate the user with Firebase\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n"
                },
                {
                    "date": 1736971020172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,11 @@\n   }\r\n \r\n   const client_id = domainClientMapping[domain]; // Get the client_id based on the domain\r\n \r\n+    // Output the client_id to the console\r\n+    console.log(\"Client ID: \", client_id);\r\n+\r\n   try {\r\n     // Authenticate the user with Firebase\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n     const user = userCredential.user;\r\n"
                },
                {
                    "date": 1736971239944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,10 @@\n   }\r\n \r\n   const client_id = domainClientMapping[domain]; // Get the client_id based on the domain\r\n \r\n-    // Output the client_id to the console\r\n-    console.log(\"Client ID: \", client_id);\r\n+  // Output the client_id to the console\r\n+  console.log(\"Client ID: \", client_id);\r\n \r\n   try {\r\n     // Authenticate the user with Firebase\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n"
                },
                {
                    "date": 1737025501889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,12 +17,19 @@\n const auth = getAuth(app);\r\n \r\n // Domain-to-client_id mapping\r\n const domainClientMapping = {\r\n-  'transinergi.com': 'client-id-transinergi',\r\n-  'datum.com': 'client-id-datum'\r\n+  'transinergi.com': {\r\n+    clientId: 'client-id-transinergi',\r\n+    companyName: 'trans sinergi'\r\n+  },\r\n+  'datum.com': {\r\n+    clientId: 'client-id-datum',\r\n+    companyName: 'DatumCorp'\r\n+  }\r\n };\r\n \r\n+\r\n // Function to handle login\r\n export const loginUser = async (email, password) => {\r\n   const domain = email.split('@')[1]; // Extract the domain part of the email\r\n \r\n"
                },
                {
                    "date": 1737039478841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,17 +19,16 @@\n // Domain-to-client_id mapping\r\n const domainClientMapping = {\r\n   'transinergi.com': {\r\n     clientId: 'client-id-transinergi',\r\n-    companyName: 'trans sinergi'\r\n+    companyName: 'Trans Sinergi'\r\n   },\r\n   'datum.com': {\r\n     clientId: 'client-id-datum',\r\n     companyName: 'DatumCorp'\r\n   }\r\n };\r\n \r\n-\r\n // Function to handle login\r\n export const loginUser = async (email, password) => {\r\n   const domain = email.split('@')[1]; // Extract the domain part of the email\r\n \r\n@@ -37,20 +36,22 @@\n   if (!domainClientMapping[domain]) {\r\n     throw new Error('This email domain is not allowed.');\r\n   }\r\n \r\n-  const client_id = domainClientMapping[domain]; // Get the client_id based on the domain\r\n+  const { clientId, companyName } = domainClientMapping[domain]; // Get clientId and companyName based on the domain\r\n \r\n-  // Output the client_id to the console\r\n-  console.log(\"Client ID: \", client_id);\r\n+  // Output the clientId and companyName to the console\r\n+  console.log(\"Client ID: \", clientId);\r\n+  console.log(\"Company Name: \", companyName);\r\n \r\n   try {\r\n     // Authenticate the user with Firebase\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n     const user = userCredential.user;\r\n \r\n-    // Store the client_id for the session (use localStorage, React context, etc.)\r\n-    localStorage.setItem('client_id', client_id);\r\n+    // Store the client_id and company_name for the session\r\n+    localStorage.setItem('client_id', clientId);\r\n+    localStorage.setItem('company_name', companyName); // Store companyName in localStorage\r\n \r\n     // Return user data (or redirect, or whatever you need)\r\n     return user;\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1737040623518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,13 +18,13 @@\n \r\n // Domain-to-client_id mapping\r\n const domainClientMapping = {\r\n   'transinergi.com': {\r\n-    clientId: 'client-id-transinergi',\r\n+    clientId: 'client-id-transinergi116',\r\n     companyName: 'Trans Sinergi'\r\n   },\r\n   'datum.com': {\r\n-    clientId: 'client-id-datum',\r\n+    clientId: 'client-id-datum116',\r\n     companyName: 'DatumCorp'\r\n   }\r\n };\r\n \r\n"
                },
                {
                    "date": 1737045846961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,12 +38,8 @@\n   }\r\n \r\n   const { clientId, companyName } = domainClientMapping[domain]; // Get clientId and companyName based on the domain\r\n \r\n-  // Output the clientId and companyName to the console\r\n-  console.log(\"Client ID: \", clientId);\r\n-  console.log(\"Company Name: \", companyName);\r\n-\r\n   try {\r\n     // Authenticate the user with Firebase\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n     const user = userCredential.user;\r\n"
                },
                {
                    "date": 1737048036894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,10 +47,20 @@\n     // Store the client_id and company_name for the session\r\n     localStorage.setItem('client_id', clientId);\r\n     localStorage.setItem('company_name', companyName); // Store companyName in localStorage\r\n \r\n-    // Return user data (or redirect, or whatever you need)\r\n+    // Redirect to dashboard after successful login\r\n+    window.location.href = '/dashboard'; // Example: Redirect to dashboard\r\n+\r\n+    // Return user data\r\n     return user;\r\n   } catch (error) {\r\n-    throw new Error('Login failed: ' + error.message);\r\n+    // Improved error handling\r\n+    if (error.code === 'auth/user-not-found') {\r\n+      throw new Error('User not found. Please check your email or sign up.');\r\n+    } else if (error.code === 'auth/wrong-password') {\r\n+      throw new Error('Incorrect password. Please try again.');\r\n+    } else {\r\n+      throw new Error('Login failed: ' + error.message);\r\n+    }\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1737048756341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,17 +38,28 @@\n   }\r\n \r\n   const { clientId, companyName } = domainClientMapping[domain]; // Get clientId and companyName based on the domain\r\n \r\n+  // Debugging outputs\r\n+  console.log('clientId:', clientId);\r\n+  console.log('companyName:', companyName);\r\n+\r\n   try {\r\n     // Authenticate the user with Firebase\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n     const user = userCredential.user;\r\n \r\n+    // Debugging output for successful authentication\r\n+    console.log('User authenticated:', user);\r\n+\r\n     // Store the client_id and company_name for the session\r\n     localStorage.setItem('client_id', clientId);\r\n     localStorage.setItem('company_name', companyName); // Store companyName in localStorage\r\n \r\n+    // Debugging output after storing in localStorage\r\n+    console.log('Stored client_id:', localStorage.getItem('client_id'));\r\n+    console.log('Stored company_name:', localStorage.getItem('company_name'));\r\n+\r\n     // Redirect to dashboard after successful login\r\n     window.location.href = '/dashboard'; // Example: Redirect to dashboard\r\n \r\n     // Return user data\r\n"
                },
                {
                    "date": 1737130388978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,77 @@\n+import { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\r\n+import { initializeApp } from \"firebase/app\";\r\n+\r\n+// Firebase configuration\r\n+const firebaseConfig = {\r\n+  apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n+  authDomain: \"datumcorp-aml.firebaseapp.com\",\r\n+  projectId: \"datumcorp-aml\",\r\n+  storageBucket: \"datumcorp-aml.appspot.com\",\r\n+  messagingSenderId: \"710428028162\",\r\n+  appId: \"1:710428028162:web:486e3aad77de49d0d8261b\",\r\n+  measurementId: \"G-KSL9Y2V3HX\"\r\n+};\r\n+\r\n+// Initialize Firebase\r\n+const app = initializeApp(firebaseConfig);\r\n+const auth = getAuth(app);\r\n+\r\n+// Domain-to-client_id mapping\r\n+const domainClientMapping = {\r\n+  'transinergi.com': {\r\n+    clientId: 'company-id-transinergi116',\r\n+    companyName: 'Trans Sinergi'\r\n+  },\r\n+  'datum.com': {\r\n+    clientId: 'company-id-datum116',\r\n+    companyName: 'DatumCorp'\r\n+  }\r\n+};\r\n+\r\n+// Function to handle login\r\n+export const loginUser = async (email, password) => {\r\n+  const domain = email.split('@')[1]; // Extract the domain part of the email\r\n+\r\n+  // Check if the domain is valid\r\n+  if (!domainClientMapping[domain]) {\r\n+    throw new Error('This email domain is not allowed.');\r\n+  }\r\n+\r\n+  const { clientId, companyName } = domainClientMapping[domain]; // Get clientId and companyName based on the domain\r\n+\r\n+  // Debugging outputs\r\n+  console.log('clientId:', clientId);\r\n+  console.log('companyName:', companyName);\r\n+\r\n+  try {\r\n+    // Authenticate the user with Firebase\r\n+    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n+    const user = userCredential.user;\r\n+\r\n+    // Debugging output for successful authentication\r\n+    console.log('User authenticated:', user);\r\n+\r\n+    // Store the client_id and company_name for the session\r\n+    localStorage.setItem('client_id', clientId);\r\n+    localStorage.setItem('company_name', companyName); // Store companyName in localStorage\r\n+\r\n+    // Debugging output after storing in localStorage\r\n+    console.log('Stored client_id:', localStorage.getItem('client_id'));\r\n+    console.log('Stored company_name:', localStorage.getItem('company_name'));\r\n+\r\n+    // Redirect to dashboard after successful login\r\n+    window.location.href = '/dashboard'; // Example: Redirect to dashboard\r\n+\r\n+    // Return user data\r\n+    return user;\r\n+  } catch (error) {\r\n+    // Improved error handling\r\n+    if (error.code === 'auth/user-not-found') {\r\n+      throw new Error('User not found. Please check your email or sign up.');\r\n+    } else if (error.code === 'auth/wrong-password') {\r\n+      throw new Error('Incorrect password. Please try again.');\r\n+    } else {\r\n+      throw new Error('Login failed: ' + error.message);\r\n+    }\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1737132868335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,13 +18,13 @@\n \r\n // Domain-to-client_id mapping\r\n const domainClientMapping = {\r\n   'transinergi.com': {\r\n-    clientId: 'company-id-transinergi116',\r\n+    clientId: '-transinergi116',\r\n     companyName: 'Trans Sinergi'\r\n   },\r\n   'datum.com': {\r\n-    clientId: 'company-id-datum116',\r\n+    clientId: '-datum116',\r\n     companyName: 'DatumCorp'\r\n   }\r\n };\r\n \r\n@@ -74,81 +74,4 @@\n       throw new Error('Login failed: ' + error.message);\r\n     }\r\n   }\r\n };\r\n-import { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\r\n-import { initializeApp } from \"firebase/app\";\r\n-\r\n-// Firebase configuration\r\n-const firebaseConfig = {\r\n-  apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n-  authDomain: \"datumcorp-aml.firebaseapp.com\",\r\n-  projectId: \"datumcorp-aml\",\r\n-  storageBucket: \"datumcorp-aml.appspot.com\",\r\n-  messagingSenderId: \"710428028162\",\r\n-  appId: \"1:710428028162:web:486e3aad77de49d0d8261b\",\r\n-  measurementId: \"G-KSL9Y2V3HX\"\r\n-};\r\n-\r\n-// Initialize Firebase\r\n-const app = initializeApp(firebaseConfig);\r\n-const auth = getAuth(app);\r\n-\r\n-// Domain-to-client_id mapping\r\n-const domainClientMapping = {\r\n-  'transinergi.com': {\r\n-    clientId: 'client-id-transinergi116',\r\n-    companyName: 'Trans Sinergi'\r\n-  },\r\n-  'datum.com': {\r\n-    clientId: 'client-id-datum116',\r\n-    companyName: 'DatumCorp'\r\n-  }\r\n-};\r\n-\r\n-// Function to handle login\r\n-export const loginUser = async (email, password) => {\r\n-  const domain = email.split('@')[1]; // Extract the domain part of the email\r\n-\r\n-  // Check if the domain is valid\r\n-  if (!domainClientMapping[domain]) {\r\n-    throw new Error('This email domain is not allowed.');\r\n-  }\r\n-\r\n-  const { clientId, companyName } = domainClientMapping[domain]; // Get clientId and companyName based on the domain\r\n-\r\n-  // Debugging outputs\r\n-  console.log('clientId:', clientId);\r\n-  console.log('companyName:', companyName);\r\n-\r\n-  try {\r\n-    // Authenticate the user with Firebase\r\n-    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n-    const user = userCredential.user;\r\n-\r\n-    // Debugging output for successful authentication\r\n-    console.log('User authenticated:', user);\r\n-\r\n-    // Store the client_id and company_name for the session\r\n-    localStorage.setItem('client_id', clientId);\r\n-    localStorage.setItem('company_name', companyName); // Store companyName in localStorage\r\n-\r\n-    // Debugging output after storing in localStorage\r\n-    console.log('Stored client_id:', localStorage.getItem('client_id'));\r\n-    console.log('Stored company_name:', localStorage.getItem('company_name'));\r\n-\r\n-    // Redirect to dashboard after successful login\r\n-    window.location.href = '/dashboard'; // Example: Redirect to dashboard\r\n-\r\n-    // Return user data\r\n-    return user;\r\n-  } catch (error) {\r\n-    // Improved error handling\r\n-    if (error.code === 'auth/user-not-found') {\r\n-      throw new Error('User not found. Please check your email or sign up.');\r\n-    } else if (error.code === 'auth/wrong-password') {\r\n-      throw new Error('Incorrect password. Please try again.');\r\n-    } else {\r\n-      throw new Error('Login failed: ' + error.message);\r\n-    }\r\n-  }\r\n-};\r\n"
                },
                {
                    "date": 1737132880751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,13 +18,13 @@\n \r\n // Domain-to-client_id mapping\r\n const domainClientMapping = {\r\n   'transinergi.com': {\r\n-    clientId: '-transinergi116',\r\n+    clientId: 'transinergi116',\r\n     companyName: 'Trans Sinergi'\r\n   },\r\n   'datum.com': {\r\n-    clientId: '-datum116',\r\n+    clientId: 'datum116',\r\n     companyName: 'DatumCorp'\r\n   }\r\n };\r\n \r\n"
                },
                {
                    "date": 1737133159947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\r\n import { initializeApp } from \"firebase/app\";\r\n+import { getFirestore, doc, getDoc } from \"firebase/firestore\"; // Firestore imports\r\n \r\n // Firebase configuration\r\n const firebaseConfig = {\r\n   apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n@@ -14,51 +15,56 @@\n \r\n // Initialize Firebase\r\n const app = initializeApp(firebaseConfig);\r\n const auth = getAuth(app);\r\n+const db = getFirestore(app); // Initialize Firestore\r\n \r\n-// Domain-to-client_id mapping\r\n-const domainClientMapping = {\r\n-  'transinergi.com': {\r\n-    clientId: 'transinergi116',\r\n-    companyName: 'Trans Sinergi'\r\n-  },\r\n-  'datum.com': {\r\n-    clientId: 'datum116',\r\n-    companyName: 'DatumCorp'\r\n+// Function to check if the email is registered in Firestore and fetch its data\r\n+const getUserData = async (email) => {\r\n+  try {\r\n+    const userDocRef = doc(db, 'users', email); // Reference to the user's document by email\r\n+    const userDoc = await getDoc(userDocRef); // Fetch the document\r\n+\r\n+    if (userDoc.exists()) {\r\n+      const userData = userDoc.data();\r\n+      console.log('User data fetched from Firestore:', userData);\r\n+      return {\r\n+        ...userData,\r\n+        id: userDoc.id // Include the document ID (email) as part of the returned data\r\n+      };\r\n+    } else {\r\n+      console.log('Email not found in Firestore:', email);\r\n+      return null; // Return null if no document exists\r\n+    }\r\n+  } catch (error) {\r\n+    console.error('Error fetching user data from Firestore:', error);\r\n+    throw new Error('Unable to fetch user data.');\r\n   }\r\n };\r\n \r\n // Function to handle login\r\n export const loginUser = async (email, password) => {\r\n-  const domain = email.split('@')[1]; // Extract the domain part of the email\r\n-\r\n-  // Check if the domain is valid\r\n-  if (!domainClientMapping[domain]) {\r\n-    throw new Error('This email domain is not allowed.');\r\n+  // Fetch the user's data from Firestore\r\n+  const userData = await getUserData(email);\r\n+  if (!userData) {\r\n+    throw new Error('This email is not registered. Please sign up.');\r\n   }\r\n \r\n-  const { clientId, companyName } = domainClientMapping[domain]; // Get clientId and companyName based on the domain\r\n-\r\n-  // Debugging outputs\r\n-  console.log('clientId:', clientId);\r\n-  console.log('companyName:', companyName);\r\n-\r\n   try {\r\n     // Authenticate the user with Firebase\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n     const user = userCredential.user;\r\n \r\n     // Debugging output for successful authentication\r\n     console.log('User authenticated:', user);\r\n \r\n-    // Store the client_id and company_name for the session\r\n-    localStorage.setItem('client_id', clientId);\r\n-    localStorage.setItem('company_name', companyName); // Store companyName in localStorage\r\n-\r\n-    // Debugging output after storing in localStorage\r\n+    // Store the user data for the session\r\n+    localStorage.setItem('client_id', userData.clientId); // From Firestore\r\n+    localStorage.setItem('company_name', userData.companyName); // From Firestore\r\n+    localStorage.setItem('user_id', userData.id); // The document ID (email)\r\n     console.log('Stored client_id:', localStorage.getItem('client_id'));\r\n     console.log('Stored company_name:', localStorage.getItem('company_name'));\r\n+    console.log('Stored user_id:', localStorage.getItem('user_id'));\r\n \r\n     // Redirect to dashboard after successful login\r\n     window.location.href = '/dashboard'; // Example: Redirect to dashboard\r\n \r\n"
                },
                {
                    "date": 1737133802588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \r\n // Function to check if the email is registered in Firestore and fetch its data\r\n const getUserData = async (email) => {\r\n   try {\r\n-    const userDocRef = doc(db, 'users', email); // Reference to the user's document by email\r\n+    const userDocRef = doc(db, 'users'); // Reference to the user's document by email\r\n     const userDoc = await getDoc(userDocRef); // Fetch the document\r\n \r\n     if (userDoc.exists()) {\r\n       const userData = userDoc.data();\r\n"
                },
                {
                    "date": 1737134093480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \r\n // Function to check if the email is registered in Firestore and fetch its data\r\n const getUserData = async (email) => {\r\n   try {\r\n-    const userDocRef = doc(db, 'users'); // Reference to the user's document by email\r\n+    const userDocRef = doc(db, 'users', email); // Reference to the user's document by email (using email as the document ID)\r\n     const userDoc = await getDoc(userDocRef); // Fetch the document\r\n \r\n     if (userDoc.exists()) {\r\n       const userData = userDoc.data();\r\n"
                },
                {
                    "date": 1737134478117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,48 +17,31 @@\n const app = initializeApp(firebaseConfig);\r\n const auth = getAuth(app);\r\n const db = getFirestore(app); // Initialize Firestore\r\n \r\n-// Function to check if the email is registered in Firestore and fetch its data\r\n-const getUserData = async (email) => {\r\n+// Function to handle login\r\n+export const loginUser = async (email, password) => {\r\n   try {\r\n-    const userDocRef = doc(db, 'users', email); // Reference to the user's document by email (using email as the document ID)\r\n+    // Fetch user data from Firestore directly using getDoc\r\n+    const userDocRef = doc(db, 'users', email); // Reference to the user's document by email (using email as document ID)\r\n     const userDoc = await getDoc(userDocRef); // Fetch the document\r\n \r\n-    if (userDoc.exists()) {\r\n-      const userData = userDoc.data();\r\n-      console.log('User data fetched from Firestore:', userData);\r\n-      return {\r\n-        ...userData,\r\n-        id: userDoc.id // Include the document ID (email) as part of the returned data\r\n-      };\r\n-    } else {\r\n+    if (!userDoc.exists()) {\r\n       console.log('Email not found in Firestore:', email);\r\n-      return null; // Return null if no document exists\r\n+      throw new Error('This email is not registered. Please sign up.');\r\n     }\r\n-  } catch (error) {\r\n-    console.error('Error fetching user data from Firestore:', error);\r\n-    throw new Error('Unable to fetch user data.');\r\n-  }\r\n-};\r\n \r\n-// Function to handle login\r\n-export const loginUser = async (email, password) => {\r\n-  // Fetch the user's data from Firestore\r\n-  const userData = await getUserData(email);\r\n-  if (!userData) {\r\n-    throw new Error('This email is not registered. Please sign up.');\r\n-  }\r\n+    const userData = userDoc.data();\r\n+    console.log('User data fetched from Firestore:', userData);\r\n \r\n-  try {\r\n     // Authenticate the user with Firebase\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n     const user = userCredential.user;\r\n \r\n     // Debugging output for successful authentication\r\n     console.log('User authenticated:', user);\r\n \r\n-    // Store the user data for the session\r\n+    // Store the user data for the session in localStorage\r\n     localStorage.setItem('client_id', userData.clientId); // From Firestore\r\n     localStorage.setItem('company_name', userData.companyName); // From Firestore\r\n     localStorage.setItem('user_id', userData.id); // The document ID (email)\r\n     console.log('Stored client_id:', localStorage.getItem('client_id'));\r\n@@ -67,9 +50,9 @@\n \r\n     // Redirect to dashboard after successful login\r\n     window.location.href = '/dashboard'; // Example: Redirect to dashboard\r\n \r\n-    // Return user data\r\n+    // Return the authenticated user\r\n     return user;\r\n   } catch (error) {\r\n     // Improved error handling\r\n     if (error.code === 'auth/user-not-found') {\r\n"
                },
                {
                    "date": 1737134627450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n // Function to handle login\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n     // Fetch user data from Firestore directly using getDoc\r\n-    const userDocRef = doc(db, 'users', email); // Reference to the user's document by email (using email as document ID)\r\n+    const userDocRef = doc(db, 'users', 'anantagrh@transinergi.com'); // Reference to the user's document by email (using email as document ID)\r\n     const userDoc = await getDoc(userDocRef); // Fetch the document\r\n \r\n     if (!userDoc.exists()) {\r\n       console.log('Email not found in Firestore:', email);\r\n"
                },
                {
                    "date": 1737134762730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n // Function to handle login\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n     // Fetch user data from Firestore directly using getDoc\r\n-    const userDocRef = doc(db, 'users', 'anantagrh@transinergi.com'); // Reference to the user's document by email (using email as document ID)\r\n+    const userDocRef = doc(db, 'users', email); // Reference to the user's document by email (using email as document ID)\r\n     const userDoc = await getDoc(userDocRef); // Fetch the document\r\n \r\n     if (!userDoc.exists()) {\r\n       console.log('Email not found in Firestore:', email);\r\n"
                },
                {
                    "date": 1737134831697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n // Function to handle login\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n     // Fetch user data from Firestore directly using getDoc\r\n+    email = 'anantagrh@transinergi.com '\r\n     const userDocRef = doc(db, 'users', email); // Reference to the user's document by email (using email as document ID)\r\n     const userDoc = await getDoc(userDocRef); // Fetch the document\r\n \r\n     if (!userDoc.exists()) {\r\n"
                },
                {
                    "date": 1737135310892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n // Function to handle login\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n     // Fetch user data from Firestore directly using getDoc\r\n-    email = 'anantagrh@transinergi.com '\r\n+    email = 'anantagrh@transinergi.com' // Example email for testing\r\n     const userDocRef = doc(db, 'users', email); // Reference to the user's document by email (using email as document ID)\r\n     const userDoc = await getDoc(userDocRef); // Fetch the document\r\n \r\n     if (!userDoc.exists()) {\r\n@@ -41,10 +41,10 @@\n     // Debugging output for successful authentication\r\n     console.log('User authenticated:', user);\r\n \r\n     // Store the user data for the session in localStorage\r\n-    localStorage.setItem('client_id', userData.clientId); // From Firestore\r\n-    localStorage.setItem('company_name', userData.companyName); // From Firestore\r\n+    localStorage.setItem('client_id', userData['client id']); // From Firestore (field name with space)\r\n+    localStorage.setItem('company_name', userData['company name']); // From Firestore (field name with space)\r\n     localStorage.setItem('user_id', userData.id); // The document ID (email)\r\n     console.log('Stored client_id:', localStorage.getItem('client_id'));\r\n     console.log('Stored company_name:', localStorage.getItem('company_name'));\r\n     console.log('Stored user_id:', localStorage.getItem('user_id'));\r\n"
                },
                {
                    "date": 1737135580808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// auth.jsx\r\n import { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\r\n import { initializeApp } from \"firebase/app\";\r\n import { getFirestore, doc, getDoc } from \"firebase/firestore\"; // Firestore imports\r\n \r\n"
                },
                {
                    "date": 1737136490366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// auth.jsx\r\n import { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\r\n import { initializeApp } from \"firebase/app\";\r\n import { getFirestore, doc, getDoc } from \"firebase/firestore\"; // Firestore imports\r\n \r\n"
                },
                {
                    "date": 1737136508889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,4 +64,5 @@\n       throw new Error('Login failed: ' + error.message);\r\n     }\r\n   }\r\n };\r\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1737137010064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,5 +64,4 @@\n       throw new Error('Login failed: ' + error.message);\r\n     }\r\n   }\r\n };\r\n-  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1737137211299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-import { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\r\n-import { initializeApp } from \"firebase/app\";\r\n-import { getFirestore, doc, getDoc } from \"firebase/firestore\"; // Firestore imports\r\n+import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\n+import { initializeApp } from 'firebase/app';\r\n+import { getFirestore, doc, getDoc } from 'firebase/firestore';\r\n \r\n // Firebase configuration\r\n const firebaseConfig = {\r\n   apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n@@ -20,12 +20,10 @@\n \r\n // Function to handle login\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n-    // Fetch user data from Firestore directly using getDoc\r\n-    email = 'anantagrh@transinergi.com' // Example email for testing\r\n-    const userDocRef = doc(db, 'users', email); // Reference to the user's document by email (using email as document ID)\r\n-    const userDoc = await getDoc(userDocRef); // Fetch the document\r\n+    const userDocRef = doc(db, 'users', email);\r\n+    const userDoc = await getDoc(userDocRef);\r\n \r\n     if (!userDoc.exists()) {\r\n       console.log('Email not found in Firestore:', email);\r\n       throw new Error('This email is not registered. Please sign up.');\r\n@@ -33,30 +31,23 @@\n \r\n     const userData = userDoc.data();\r\n     console.log('User data fetched from Firestore:', userData);\r\n \r\n-    // Authenticate the user with Firebase\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n     const user = userCredential.user;\r\n \r\n-    // Debugging output for successful authentication\r\n     console.log('User authenticated:', user);\r\n \r\n-    // Store the user data for the session in localStorage\r\n-    localStorage.setItem('client_id', userData['client id']); // From Firestore (field name with space)\r\n-    localStorage.setItem('company_name', userData['company name']); // From Firestore (field name with space)\r\n-    localStorage.setItem('user_id', userData.id); // The document ID (email)\r\n-    console.log('Stored client_id:', localStorage.getItem('client_id'));\r\n-    console.log('Stored company_name:', localStorage.getItem('company_name'));\r\n-    console.log('Stored user_id:', localStorage.getItem('user_id'));\r\n+    // Store the user data in localStorage\r\n+    localStorage.setItem('client_id', userData['client id']);\r\n+    localStorage.setItem('company_name', userData['company name']);\r\n+    localStorage.setItem('user_id', userData.id);\r\n \r\n     // Redirect to dashboard after successful login\r\n-    window.location.href = '/dashboard'; // Example: Redirect to dashboard\r\n+    window.location.href = '/dashboard';\r\n \r\n-    // Return the authenticated user\r\n     return user;\r\n   } catch (error) {\r\n-    // Improved error handling\r\n     if (error.code === 'auth/user-not-found') {\r\n       throw new Error('User not found. Please check your email or sign up.');\r\n     } else if (error.code === 'auth/wrong-password') {\r\n       throw new Error('Incorrect password. Please try again.');\r\n"
                },
                {
                    "date": 1737138313681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\n import { initializeApp } from 'firebase/app';\r\n-import { getFirestore, doc, getDoc } from 'firebase/firestore';\r\n+import { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\r\n \r\n // Firebase configuration\r\n const firebaseConfig = {\r\n   apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n"
                },
                {
                    "date": 1737138478131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     localStorage.setItem('company_name', userData['company name']);\r\n     localStorage.setItem('user_id', userData.id);\r\n \r\n     // Redirect to dashboard after successful login\r\n-    window.location.href = '/dashboard';\r\n+    window.location.href = '/main';\r\n \r\n     return user;\r\n   } catch (error) {\r\n     if (error.code === 'auth/user-not-found') {\r\n"
                },
                {
                    "date": 1737138498213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,16 +36,18 @@\n     const user = userCredential.user;\r\n \r\n     console.log('User authenticated:', user);\r\n \r\n-    // Store the user data in localStorage\r\n-    localStorage.setItem('client_id', userData['client id']);\r\n-    localStorage.setItem('company_name', userData['company name']);\r\n-    localStorage.setItem('user_id', userData.id);\r\n \r\n-    // Redirect to dashboard after successful login\r\n-    window.location.href = '/main';\r\n+    \r\n+    // // Store the user data in localStorage\r\n+    // localStorage.setItem('client_id', userData['client id']);\r\n+    // localStorage.setItem('company_name', userData['company name']);\r\n+    // localStorage.setItem('user_id', userData.id);\r\n \r\n+    // // Redirect to dashboard after successful login\r\n+    // window.location.href = '/main';\r\n+\r\n     return user;\r\n   } catch (error) {\r\n     if (error.code === 'auth/user-not-found') {\r\n       throw new Error('User not found. Please check your email or sign up.');\r\n"
                },
                {
                    "date": 1737138695879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,11 @@\n \r\n     console.log('User authenticated:', user);\r\n \r\n \r\n-    \r\n+    doc(db, 'users', user.uid);\r\n+\r\n+\r\n     // // Store the user data in localStorage\r\n     // localStorage.setItem('client_id', userData['client id']);\r\n     // localStorage.setItem('company_name', userData['company name']);\r\n     // localStorage.setItem('user_id', userData.id);\r\n"
                },
                {
                    "date": 1737138714737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \r\n     console.log('User authenticated:', user);\r\n \r\n \r\n-    doc(db, 'users', user.uid);\r\n+    doc(db, 'users', user.user.uid);\r\n \r\n \r\n     // // Store the user data in localStorage\r\n     // localStorage.setItem('client_id', userData['client id']);\r\n"
                },
                {
                    "date": 1737138767510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,9 @@\n \r\n // Function to handle login\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n-    const userDocRef = doc(db, 'users', email);\r\n-    const userDoc = await getDoc(userDocRef);\r\n+    \r\n \r\n     if (!userDoc.exists()) {\r\n       console.log('Email not found in Firestore:', email);\r\n       throw new Error('This email is not registered. Please sign up.');\r\n@@ -36,12 +35,12 @@\n     const user = userCredential.user;\r\n \r\n     console.log('User authenticated:', user);\r\n \r\n+    const userDocRef = doc(db, 'users', email);\r\n+    const userDoc = await getDoc(userDocRef);\r\n \r\n-    doc(db, 'users', user.user.uid);\r\n \r\n-\r\n     // // Store the user data in localStorage\r\n     // localStorage.setItem('client_id', userData['client id']);\r\n     // localStorage.setItem('company_name', userData['company name']);\r\n     // localStorage.setItem('user_id', userData.id);\r\n"
                },
                {
                    "date": 1737138790464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \r\n     console.log('User authenticated:', user);\r\n \r\n     const userDocRef = doc(db, 'users', email);\r\n-    const userDoc = await getDoc(userDocRef);\r\n+    const userDoc = await setDoc(userDocRef);\r\n \r\n \r\n     // // Store the user data in localStorage\r\n     // localStorage.setItem('client_id', userData['client id']);\r\n"
                },
                {
                    "date": 1737138881804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,12 +22,9 @@\n export const loginUser = async (email, password) => {\r\n   try {\r\n     \r\n \r\n-    if (!userDoc.exists()) {\r\n-      console.log('Email not found in Firestore:', email);\r\n-      throw new Error('This email is not registered. Please sign up.');\r\n-    }\r\n+    \r\n \r\n     const userData = userDoc.data();\r\n     console.log('User data fetched from Firestore:', userData);\r\n \r\n@@ -36,10 +33,16 @@\n \r\n     console.log('User authenticated:', user);\r\n \r\n     const userDocRef = doc(db, 'users', email);\r\n-    const userDoc = await setDoc(userDocRef);\r\n+    await setDoc(userDocRef{\r\n+      email: email.value,\r\n+    });\r\n \r\n+    // if (!userDoc.exists()) {\r\n+    //       console.log('Email not found in Firestore:', email);\r\n+    //       throw new Error('This email is not registered. Please sign up.');\r\n+    //     }\r\n \r\n     // // Store the user data in localStorage\r\n     // localStorage.setItem('client_id', userData['client id']);\r\n     // localStorage.setItem('company_name', userData['company name']);\r\n"
                },
                {
                    "date": 1737138920778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,12 @@\n // Function to handle login\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n     \r\n+    if (!userDoc.exists()) {\r\n+          console.log('Email not found in Firestore:', email);\r\n+          throw new Error('This email is not registered. Please sign up.');\r\n+        }\r\n \r\n     \r\n \r\n     const userData = userDoc.data();\r\n@@ -37,12 +41,8 @@\n     await setDoc(userDocRef{\r\n       email: email.value,\r\n     });\r\n \r\n-    // if (!userDoc.exists()) {\r\n-    //       console.log('Email not found in Firestore:', email);\r\n-    //       throw new Error('This email is not registered. Please sign up.');\r\n-    //     }\r\n \r\n     // // Store the user data in localStorage\r\n     // localStorage.setItem('client_id', userData['client id']);\r\n     // localStorage.setItem('company_name', userData['company name']);\r\n"
                },
                {
                    "date": 1737138967212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \r\n     console.log('User authenticated:', user);\r\n \r\n     const userDocRef = doc(db, 'users', email);\r\n-    await setDoc(userDocRef{\r\n+    await setDoc(userDocRef, {\r\n       email: email.value,\r\n     });\r\n \r\n \r\n"
                },
                {
                    "date": 1737139051042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,12 +21,12 @@\n // Function to handle login\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n     \r\n-    if (!userDoc.exists()) {\r\n-          console.log('Email not found in Firestore:', email);\r\n-          throw new Error('This email is not registered. Please sign up.');\r\n-        }\r\n+    // if (!userDoc.exists()) {\r\n+    //       console.log('Email not found in Firestore:', email);\r\n+    //       throw new Error('This email is not registered. Please sign up.');\r\n+    //     }\r\n \r\n     \r\n \r\n     const userData = userDoc.data();\r\n"
                },
                {
                    "date": 1737139083729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,12 +21,9 @@\n // Function to handle login\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n     \r\n-    // if (!userDoc.exists()) {\r\n-    //       console.log('Email not found in Firestore:', email);\r\n-    //       throw new Error('This email is not registered. Please sign up.');\r\n-    //     }\r\n+   \r\n \r\n     \r\n \r\n     const userData = userDoc.data();\r\n@@ -37,12 +34,16 @@\n \r\n     console.log('User authenticated:', user);\r\n \r\n     const userDocRef = doc(db, 'users', email);\r\n-    await setDoc(userDocRef, {\r\n+    userDoc = await setDoc(userDocRef{\r\n       email: email.value,\r\n     });\r\n \r\n+    if (!userDoc.exists()) {\r\n+              console.log('Email not found in Firestore:', email);\r\n+              throw new Error('This email is not registered. Please sign up.');\r\n+            }\r\n \r\n     // // Store the user data in localStorage\r\n     // localStorage.setItem('client_id', userData['client id']);\r\n     // localStorage.setItem('company_name', userData['company name']);\r\n"
                },
                {
                    "date": 1737139098973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n \r\n     console.log('User authenticated:', user);\r\n \r\n     const userDocRef = doc(db, 'users', email);\r\n-    userDoc = await setDoc(userDocRef{\r\n+    userDoc = await setDoc(userDocRef, {\r\n       email: email.value,\r\n     });\r\n \r\n     if (!userDoc.exists()) {\r\n"
                },
                {
                    "date": 1737139126413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,8 @@\n // Function to handle login\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n     \r\n-   \r\n \r\n     \r\n \r\n     const userData = userDoc.data();\r\n@@ -34,16 +33,16 @@\n \r\n     console.log('User authenticated:', user);\r\n \r\n     const userDocRef = doc(db, 'users', email);\r\n-    userDoc = await setDoc(userDocRef, {\r\n+    const userDoc = await setDoc(userDocRef{\r\n       email: email.value,\r\n     });\r\n-\r\n+    \r\n     if (!userDoc.exists()) {\r\n-              console.log('Email not found in Firestore:', email);\r\n-              throw new Error('This email is not registered. Please sign up.');\r\n-            }\r\n+          console.log('Email not found in Firestore:', email);\r\n+          throw new Error('This email is not registered. Please sign up.');\r\n+        }\r\n \r\n     // // Store the user data in localStorage\r\n     // localStorage.setItem('client_id', userData['client id']);\r\n     // localStorage.setItem('company_name', userData['company name']);\r\n"
                },
                {
                    "date": 1737139140530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \r\n     console.log('User authenticated:', user);\r\n \r\n     const userDocRef = doc(db, 'users', email);\r\n-    const userDoc = await setDoc(userDocRef{\r\n+    const userDoc = await setDoc(userDocRef, {\r\n       email: email.value,\r\n     });\r\n     \r\n     if (!userDoc.exists()) {\r\n"
                },
                {
                    "date": 1737139174975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,10 +47,10 @@\n     // localStorage.setItem('client_id', userData['client id']);\r\n     // localStorage.setItem('company_name', userData['company name']);\r\n     // localStorage.setItem('user_id', userData.id);\r\n \r\n-    // // Redirect to dashboard after successful login\r\n-    // window.location.href = '/main';\r\n+    // Redirect to dashboard after successful login\r\n+    window.location.href = '/main';\r\n \r\n     return user;\r\n   } catch (error) {\r\n     if (error.code === 'auth/user-not-found') {\r\n"
                },
                {
                    "date": 1737139276999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\n import { initializeApp } from 'firebase/app';\r\n-import { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\r\n+import { getFirestore, doc, getDoc } from 'firebase/firestore'; // Corrected import\r\n \r\n // Firebase configuration\r\n const firebaseConfig = {\r\n   apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n@@ -20,35 +20,31 @@\n \r\n // Function to handle login\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n-    \r\n+    // Fetch user data from Firestore before authentication\r\n+    const userDocRef = doc(db, 'users', email); // Get reference to the user's document\r\n+    const userDoc = await getDoc(userDocRef); // Fetch the document\r\n \r\n-    \r\n+    if (!userDoc.exists()) {\r\n+      console.log('Email not found in Firestore:', email);\r\n+      throw new Error('This email is not registered. Please sign up.');\r\n+    }\r\n \r\n     const userData = userDoc.data();\r\n     console.log('User data fetched from Firestore:', userData);\r\n \r\n+    // Authenticate the user with Firebase Authentication\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n     const user = userCredential.user;\r\n \r\n     console.log('User authenticated:', user);\r\n \r\n-    const userDocRef = doc(db, 'users', email);\r\n-    const userDoc = await setDoc(userDocRef, {\r\n-      email: email.value,\r\n-    });\r\n-    \r\n-    if (!userDoc.exists()) {\r\n-          console.log('Email not found in Firestore:', email);\r\n-          throw new Error('This email is not registered. Please sign up.');\r\n-        }\r\n+    // Store the user data in localStorage (optional)\r\n+    localStorage.setItem('client_id', userData['client id']);\r\n+    localStorage.setItem('company_name', userData['company name']);\r\n+    localStorage.setItem('user_id', userData.id);\r\n \r\n-    // // Store the user data in localStorage\r\n-    // localStorage.setItem('client_id', userData['client id']);\r\n-    // localStorage.setItem('company_name', userData['company name']);\r\n-    // localStorage.setItem('user_id', userData.id);\r\n-\r\n     // Redirect to dashboard after successful login\r\n     window.location.href = '/main';\r\n \r\n     return user;\r\n"
                },
                {
                    "date": 1737139525616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,13 +38,18 @@\n     const user = userCredential.user;\r\n \r\n     console.log('User authenticated:', user);\r\n \r\n-    // Store the user data in localStorage (optional)\r\n-    localStorage.setItem('client_id', userData['client id']);\r\n-    localStorage.setItem('company_name', userData['company name']);\r\n-    localStorage.setItem('user_id', userData.id);\r\n+    await setDoc(userDocRef\r\n+      email: userData.email,\r\n+    )    \r\n \r\n+\r\n+    // // Store the user data in localStorage (optional)\r\n+    // localStorage.setItem('client_id', userData['client id']);\r\n+    // localStorage.setItem('company_name', userData['company name']);\r\n+    // localStorage.setItem('user_id', userData.id);\r\n+\r\n     // Redirect to dashboard after successful login\r\n     window.location.href = '/main';\r\n \r\n     return user;\r\n"
                },
                {
                    "date": 1737139551588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,16 +33,16 @@\n     const userData = userDoc.data();\r\n     console.log('User data fetched from Firestore:', userData);\r\n \r\n     // Authenticate the user with Firebase Authentication\r\n-    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n+    const userCredential = await signInWithEmailAndPassword(auth, email.value, password.value);\r\n     const user = userCredential.user;\r\n \r\n     console.log('User authenticated:', user);\r\n \r\n-    await setDoc(userDocRef\r\n-      email: userData.email,\r\n-    )    \r\n+    await setDoc(userDocRef, {\r\n+      email: userData.email.value,\r\n+    });    \r\n \r\n \r\n     // // Store the user data in localStorage (optional)\r\n     // localStorage.setItem('client_id', userData['client id']);\r\n"
                },
                {
                    "date": 1737139965160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,23 +33,18 @@\n     const userData = userDoc.data();\r\n     console.log('User data fetched from Firestore:', userData);\r\n \r\n     // Authenticate the user with Firebase Authentication\r\n-    const userCredential = await signInWithEmailAndPassword(auth, email.value, password.value);\r\n+    const userCredential = await signInWithEmailAndPassword(auth, email, password); // No .value needed here\r\n     const user = userCredential.user;\r\n \r\n     console.log('User authenticated:', user);\r\n \r\n-    await setDoc(userDocRef, {\r\n-      email: userData.email.value,\r\n-    });    \r\n+    // Store the user data in localStorage (optional)\r\n+    localStorage.setItem('client_id', userData['client id']);\r\n+    localStorage.setItem('company_name', userData['company name']);\r\n+    localStorage.setItem('user_id', userData.id);\r\n \r\n-\r\n-    // // Store the user data in localStorage (optional)\r\n-    // localStorage.setItem('client_id', userData['client id']);\r\n-    // localStorage.setItem('company_name', userData['company name']);\r\n-    // localStorage.setItem('user_id', userData.id);\r\n-\r\n     // Redirect to dashboard after successful login\r\n     window.location.href = '/main';\r\n \r\n     return user;\r\n"
                },
                {
                    "date": 1737139980035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,18 +33,23 @@\n     const userData = userDoc.data();\r\n     console.log('User data fetched from Firestore:', userData);\r\n \r\n     // Authenticate the user with Firebase Authentication\r\n-    const userCredential = await signInWithEmailAndPassword(auth, email, password); // No .value needed here\r\n+    const userCredential = await signInWithEmailAndPassword(auth, email.value, password.value);\r\n     const user = userCredential.user;\r\n \r\n     console.log('User authenticated:', user);\r\n \r\n-    // Store the user data in localStorage (optional)\r\n-    localStorage.setItem('client_id', userData['client id']);\r\n-    localStorage.setItem('company_name', userData['company name']);\r\n-    localStorage.setItem('user_id', userData.id);\r\n+    await setDoc(userDocRef, {\r\n+      email: userData.email.value,\r\n+    });    \r\n \r\n+\r\n+    // // Store the user data in localStorage (optional)\r\n+    // localStorage.setItem('client_id', userData['client id']);\r\n+    // localStorage.setItem('company_name', userData['company name']);\r\n+    // localStorage.setItem('user_id', userData.id);\r\n+\r\n     // Redirect to dashboard after successful login\r\n     window.location.href = '/main';\r\n \r\n     return user;\r\n"
                },
                {
                    "date": 1737140049759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,23 +33,18 @@\n     const userData = userDoc.data();\r\n     console.log('User data fetched from Firestore:', userData);\r\n \r\n     // Authenticate the user with Firebase Authentication\r\n-    const userCredential = await signInWithEmailAndPassword(auth, email.value, password.value);\r\n+    const userCredential = await signInWithEmailAndPassword(auth, email, password); // No .value needed here\r\n     const user = userCredential.user;\r\n \r\n     console.log('User authenticated:', user);\r\n \r\n-    await setDoc(userDocRef, {\r\n-      email: userData.email.value,\r\n-    });    \r\n+    // Store the user data in localStorage (optional)\r\n+    localStorage.setItem('client_id', userData['client id']);\r\n+    localStorage.setItem('company_name', userData['company name']);\r\n+    localStorage.setItem('user_id', userData.id);\r\n \r\n-\r\n-    // // Store the user data in localStorage (optional)\r\n-    // localStorage.setItem('client_id', userData['client id']);\r\n-    // localStorage.setItem('company_name', userData['company name']);\r\n-    // localStorage.setItem('user_id', userData.id);\r\n-\r\n     // Redirect to dashboard after successful login\r\n     window.location.href = '/main';\r\n \r\n     return user;\r\n"
                },
                {
                    "date": 1737140209860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,12 @@\n     // Authenticate the user with Firebase Authentication\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password); // No .value needed here\r\n     const user = userCredential.user;\r\n \r\n+    await setDoc(userDocRef, {\r\n+      email: user.email,\r\n+    })\r\n+\r\n     console.log('User authenticated:', user);\r\n \r\n     // Store the user data in localStorage (optional)\r\n     localStorage.setItem('client_id', userData['client id']);\r\n"
                },
                {
                    "date": 1737140275449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,11 @@\n     // Authenticate the user with Firebase Authentication\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password); // No .value needed here\r\n     const user = userCredential.user;\r\n \r\n-    await setDoc(userDocRef, {\r\n+    // Store user data in Firestore after authentication\r\n+    const authenticatedUserDocRef = doc(db, 'users', user.uid); // Use UID as document ID\r\n+    await setDoc(authenticatedUserDocRef, {\r\n       email: user.email,\r\n     })\r\n \r\n     console.log('User authenticated:', user);\r\n"
                },
                {
                    "date": 1737140310436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     const userCredential = await signInWithEmailAndPassword(auth, email, password); // No .value needed here\r\n     const user = userCredential.user;\r\n \r\n     // Store user data in Firestore after authentication\r\n-    const authenticatedUserDocRef = doc(db, 'users', user.uid); // Use UID as document ID\r\n+    const authenticatedUserDocRef = doc(db, 'user', user.uid); // Use UID as document ID\r\n     await setDoc(authenticatedUserDocRef, {\r\n       email: user.email,\r\n     })\r\n \r\n"
                },
                {
                    "date": 1737140616919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\n import { initializeApp } from 'firebase/app';\r\n-import { getFirestore, doc, getDoc } from 'firebase/firestore'; // Corrected import\r\n+import { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'; // Import setDoc\r\n \r\n // Firebase configuration\r\n const firebaseConfig = {\r\n   apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n@@ -37,12 +37,12 @@\n     const userCredential = await signInWithEmailAndPassword(auth, email, password); // No .value needed here\r\n     const user = userCredential.user;\r\n \r\n     // Store user data in Firestore after authentication\r\n-    const authenticatedUserDocRef = doc(db, 'user', user.uid); // Use UID as document ID\r\n+    const authenticatedUserDocRef = doc(db, 'users', user.uid); // Use 'users' collection and user UID\r\n     await setDoc(authenticatedUserDocRef, {\r\n       email: user.email,\r\n-    })\r\n+    });\r\n \r\n     console.log('User authenticated:', user);\r\n \r\n     // Store the user data in localStorage (optional)\r\n"
                },
                {
                    "date": 1737207573332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,68 @@\n+import { getAuth, signInWithEmailAndPassword, onAuthStateChanged } from 'firebase/auth';\r\n+import { initializeApp } from 'firebase/app';\r\n+import { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\r\n+\r\n+// Firebase configuration\r\n+const firebaseConfig = {\r\n+  apiKey: \"YOUR_API_KEY\",\r\n+  authDomain: \"YOUR_AUTH_DOMAIN\",\r\n+  projectId: \"YOUR_PROJECT_ID\",\r\n+  storageBucket: \"YOUR_STORAGE_BUCKET\",\r\n+  messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\r\n+  appId: \"YOUR_APP_ID\",\r\n+  measurementId: \"YOUR_MEASUREMENT_ID\"\r\n+};\r\n+\r\n+// Initialize Firebase\r\n+const app = initializeApp(firebaseConfig);\r\n+const auth = getAuth(app);\r\n+const db = getFirestore(app);\r\n+\r\n+// Function to handle login\r\n+export const loginUser = async (email, password) => {\r\n+  try {\r\n+    // Fetch user data from Firestore\r\n+    const userDocRef = doc(db, 'users', email);\r\n+    const userDoc = await getDoc(userDocRef);\r\n+\r\n+    if (!userDoc.exists()) {\r\n+      console.log('Email not found in Firestore:', email);\r\n+      throw new Error('This email is not registered. Please sign up.');\r\n+    }\r\n+\r\n+    const userData = userDoc.data();\r\n+    console.log('User data fetched from Firestore:', userData);\r\n+\r\n+    // Authenticate user\r\n+    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n+    const user = userCredential.user;\r\n+\r\n+    // Store user data in Firestore\r\n+    const authenticatedUserDocRef = doc(db, 'users', user.uid);\r\n+    await setDoc(authenticatedUserDocRef, {\r\n+      email: user.email,\r\n+    });\r\n+\r\n+    console.log('User authenticated:', user);\r\n+\r\n+    // Store user data in localStorage\r\n+    localStorage.setItem('client_id', userData['client id']);\r\n+    localStorage.setItem('company_name', userData['company name']);\r\n+    localStorage.setItem('user_id', userData.id);\r\n+\r\n+    // Redirect to dashboard\r\n+    window.location.href = '/main';\r\n+\r\n+    return user;\r\n+  } catch (error) {\r\n+    if (error.code === 'permission-denied') {\r\n+      console.error('Permission denied. Check Firestore rules:', error.message);\r\n+    } else if (error.code === 'auth/user-not-found') {\r\n+      throw new Error('User not found. Please check your email or sign up.');\r\n+    } else if (error.code === 'auth/wrong-password') {\r\n+      throw new Error('Incorrect password. Please try again.');\r\n+    } else {\r\n+      throw new Error('Login failed: ' + error.message);\r\n+    }\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1737207695045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,72 +1,4 @@\n-import { getAuth, signInWithEmailAndPassword, onAuthStateChanged } from 'firebase/auth';\r\n-import { initializeApp } from 'firebase/app';\r\n-import { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\r\n-\r\n-// Firebase configuration\r\n-const firebaseConfig = {\r\n-  apiKey: \"YOUR_API_KEY\",\r\n-  authDomain: \"YOUR_AUTH_DOMAIN\",\r\n-  projectId: \"YOUR_PROJECT_ID\",\r\n-  storageBucket: \"YOUR_STORAGE_BUCKET\",\r\n-  messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\r\n-  appId: \"YOUR_APP_ID\",\r\n-  measurementId: \"YOUR_MEASUREMENT_ID\"\r\n-};\r\n-\r\n-// Initialize Firebase\r\n-const app = initializeApp(firebaseConfig);\r\n-const auth = getAuth(app);\r\n-const db = getFirestore(app);\r\n-\r\n-// Function to handle login\r\n-export const loginUser = async (email, password) => {\r\n-  try {\r\n-    // Fetch user data from Firestore\r\n-    const userDocRef = doc(db, 'users', email);\r\n-    const userDoc = await getDoc(userDocRef);\r\n-\r\n-    if (!userDoc.exists()) {\r\n-      console.log('Email not found in Firestore:', email);\r\n-      throw new Error('This email is not registered. Please sign up.');\r\n-    }\r\n-\r\n-    const userData = userDoc.data();\r\n-    console.log('User data fetched from Firestore:', userData);\r\n-\r\n-    // Authenticate user\r\n-    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n-    const user = userCredential.user;\r\n-\r\n-    // Store user data in Firestore\r\n-    const authenticatedUserDocRef = doc(db, 'users', user.uid);\r\n-    await setDoc(authenticatedUserDocRef, {\r\n-      email: user.email,\r\n-    });\r\n-\r\n-    console.log('User authenticated:', user);\r\n-\r\n-    // Store user data in localStorage\r\n-    localStorage.setItem('client_id', userData['client id']);\r\n-    localStorage.setItem('company_name', userData['company name']);\r\n-    localStorage.setItem('user_id', userData.id);\r\n-\r\n-    // Redirect to dashboard\r\n-    window.location.href = '/main';\r\n-\r\n-    return user;\r\n-  } catch (error) {\r\n-    if (error.code === 'permission-denied') {\r\n-      console.error('Permission denied. Check Firestore rules:', error.message);\r\n-    } else if (error.code === 'auth/user-not-found') {\r\n-      throw new Error('User not found. Please check your email or sign up.');\r\n-    } else if (error.code === 'auth/wrong-password') {\r\n-      throw new Error('Incorrect password. Please try again.');\r\n-    } else {\r\n-      throw new Error('Login failed: ' + error.message);\r\n-    }\r\n-  }\r\n-};\r\n import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\n import { initializeApp } from 'firebase/app';\r\n import { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'; // Import setDoc\r\n \r\n"
                },
                {
                    "date": 1737224705671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\n import { initializeApp } from 'firebase/app';\r\n-import { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'; // Import setDoc\r\n+import { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'; // Import Firestore functions\r\n \r\n // Firebase configuration\r\n const firebaseConfig = {\r\n   apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n@@ -17,50 +17,33 @@\n const app = initializeApp(firebaseConfig);\r\n const auth = getAuth(app);\r\n const db = getFirestore(app); // Initialize Firestore\r\n \r\n-// Function to handle login\r\n-export const loginUser = async (email, password) => {\r\n+// Function to fetch user data by UID\r\n+export const fetchUserDataByUID = async (uid) => {\r\n   try {\r\n-    // Fetch user data from Firestore before authentication\r\n-    const userDocRef = doc(db, 'users', email); // Get reference to the user's document\r\n+    const userDocRef = doc(db, 'users', uid); // Reference to the document with the given UID\r\n     const userDoc = await getDoc(userDocRef); // Fetch the document\r\n \r\n     if (!userDoc.exists()) {\r\n-      console.log('Email not found in Firestore:', email);\r\n-      throw new Error('This email is not registered. Please sign up.');\r\n+      throw new Error(`No user found with UID: ${uid}`);\r\n     }\r\n \r\n-    const userData = userDoc.data();\r\n-    console.log('User data fetched from Firestore:', userData);\r\n+    const userData = userDoc.data(); // Extract data from the document\r\n+    console.log('Fetched user data:', userData);\r\n+    return userData;\r\n+  } catch (error) {\r\n+    console.error('Error fetching user data:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n \r\n-    // Authenticate the user with Firebase Authentication\r\n-    const userCredential = await signInWithEmailAndPassword(auth, email, password); // No .value needed here\r\n-    const user = userCredential.user;\r\n-\r\n-    // Store user data in Firestore after authentication\r\n-    const authenticatedUserDocRef = doc(db, 'users', user.uid); // Use 'users' collection and user UID\r\n-    await setDoc(authenticatedUserDocRef, {\r\n-      email: user.email,\r\n-    });\r\n-\r\n-    console.log('User authenticated:', user);\r\n-\r\n-    // Store the user data in localStorage (optional)\r\n-    localStorage.setItem('client_id', userData['client id']);\r\n-    localStorage.setItem('company_name', userData['company name']);\r\n-    localStorage.setItem('user_id', userData.id);\r\n-\r\n-    // Redirect to dashboard after successful login\r\n-    window.location.href = '/main';\r\n-\r\n-    return user;\r\n+// Example usage\r\n+(async () => {\r\n+  const testUID = \"F6tMvLc7lCMQhLQVeiPSNHjUzYH2\"; // Replace this with the desired UID\r\n+  try {\r\n+    const userData = await fetchUserDataByUID(testUID);\r\n+    console.log('User data for UID:', testUID, userData);\r\n   } catch (error) {\r\n-    if (error.code === 'auth/user-not-found') {\r\n-      throw new Error('User not found. Please check your email or sign up.');\r\n-    } else if (error.code === 'auth/wrong-password') {\r\n-      throw new Error('Incorrect password. Please try again.');\r\n-    } else {\r\n-      throw new Error('Login failed: ' + error.message);\r\n-    }\r\n+    console.error(error.message);\r\n   }\r\n-};\r\n+})();\r\n"
                },
                {
                    "date": 1737224918146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,14 +36,28 @@\n     throw error;\r\n   }\r\n };\r\n \r\n-// Example usage\r\n-(async () => {\r\n-  const testUID = \"F6tMvLc7lCMQhLQVeiPSNHjUzYH2\"; // Replace this with the desired UID\r\n+// Function to handle login\r\n+export const loginUser = async (email, password) => {\r\n   try {\r\n-    const userData = await fetchUserDataByUID(testUID);\r\n-    console.log('User data for UID:', testUID, userData);\r\n+    // Authenticate the user\r\n+    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n+    const user = userCredential.user;\r\n+\r\n+    // Fetch user data from Firestore using UID\r\n+    const userData = await fetchUserDataByUID(user.uid);\r\n+\r\n+    // Store user data in localStorage\r\n+    localStorage.setItem('client_id', userData['client id']);\r\n+    localStorage.setItem('company_name', userData['company name']);\r\n+    localStorage.setItem('user_id', user.uid);\r\n+\r\n+    return user;\r\n   } catch (error) {\r\n-    console.error(error.message);\r\n+    console.error('Login failed:', error.message);\r\n+    throw error;\r\n   }\r\n-})();\r\n+};\r\n+\r\n+// Export auth and db if needed elsewhere\r\n+export { auth, db };\r\n"
                },
                {
                    "date": 1737225230657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,27 @@\n     throw error;\r\n   }\r\n };\r\n \r\n+// Function to fetch company data by company ID\r\n+export const fetchCompanyDataByID = async (companyId) => {\r\n+  try {\r\n+    const companyDocRef = doc(db, 'company', companyId); // Reference to the document in 'company' collection\r\n+    const companyDoc = await getDoc(companyDocRef); // Fetch the document\r\n+\r\n+    if (!companyDoc.exists()) {\r\n+      throw new Error(`No company found with ID: ${companyId}`);\r\n+    }\r\n+\r\n+    const companyData = companyDoc.data(); // Extract data from the document\r\n+    console.log('Fetched company data:', companyData);\r\n+    return companyData;\r\n+  } catch (error) {\r\n+    console.error('Error fetching company data:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n // Function to handle login\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n     // Authenticate the user\r\n@@ -46,11 +65,15 @@\n \r\n     // Fetch user data from Firestore using UID\r\n     const userData = await fetchUserDataByUID(user.uid);\r\n \r\n-    // Store user data in localStorage\r\n-    localStorage.setItem('client_id', userData['client id']);\r\n-    localStorage.setItem('company_name', userData['company name']);\r\n+    // Use the company ID from the user data to fetch company data\r\n+    const companyId = userData['company id ']; // Replace with correct field name if necessary\r\n+    const companyData = await fetchCompanyDataByID(companyId);\r\n+\r\n+    // Store user and company data in localStorage\r\n+    localStorage.setItem('client_id', companyId);\r\n+    localStorage.setItem('company_name', companyData['name'] || 'Unknown'); // Adjust field as needed\r\n     localStorage.setItem('user_id', user.uid);\r\n \r\n     return user;\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1737225505452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,89 @@\n+import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\n+import { initializeApp } from 'firebase/app';\r\n+import { getFirestore, doc, getDoc } from 'firebase/firestore'; // Import Firestore functions\r\n+\r\n+// Firebase configuration\r\n+const firebaseConfig = {\r\n+  apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n+  authDomain: \"datumcorp-aml.firebaseapp.com\",\r\n+  projectId: \"datumcorp-aml\",\r\n+  storageBucket: \"datumcorp-aml.appspot.com\",\r\n+  messagingSenderId: \"710428028162\",\r\n+  appId: \"1:710428028162:web:486e3aad77de49d0d8261b\",\r\n+  measurementId: \"G-KSL9Y2V3HX\",\r\n+};\r\n+\r\n+// Initialize Firebase\r\n+const app = initializeApp(firebaseConfig);\r\n+const auth = getAuth(app);\r\n+const db = getFirestore(app); // Initialize Firestore\r\n+\r\n+// Function to fetch user data by UID\r\n+export const fetchUserDataByUID = async (uid) => {\r\n+  try {\r\n+    const userDocRef = doc(db, 'users', uid); // Reference to 'users' document\r\n+    const userDoc = await getDoc(userDocRef); // Fetch user document\r\n+\r\n+    if (!userDoc.exists()) {\r\n+      throw new Error(`No user found with UID: ${uid}`);\r\n+    }\r\n+\r\n+    const userData = userDoc.data(); // Extract data from the user document\r\n+    console.log('Fetched user data:', userData);\r\n+    return userData;\r\n+  } catch (error) {\r\n+    console.error('Error fetching user data:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+// Function to fetch company data by company ID\r\n+export const fetchCompanyDataByID = async (companyId) => {\r\n+  try {\r\n+    const companyDocRef = doc(db, 'company', companyId); // Reference to 'company' document\r\n+    const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n+\r\n+    if (!companyDoc.exists()) {\r\n+      throw new Error(`No company found with ID: ${companyId}`);\r\n+    }\r\n+\r\n+    const companyData = companyDoc.data(); // Extract data from the company document\r\n+    console.log('Fetched company data:', companyData);\r\n+    return companyData;\r\n+  } catch (error) {\r\n+    console.error('Error fetching company data:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+// Function to handle login and fetch related data\r\n+export const loginUser = async (email, password) => {\r\n+  try {\r\n+    // Authenticate the user\r\n+    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n+    const user = userCredential.user;\r\n+\r\n+    // Fetch user data from Firestore using UID\r\n+    const userData = await fetchUserDataByUID(user.uid);\r\n+\r\n+    // Fetch company data using the 'company id' field in the user document\r\n+    const companyId = userData['company id ']; // Ensure this field exists in Firestore\r\n+    if (!companyId) {\r\n+      throw new Error('Company ID not found in user data.');\r\n+    }\r\n+\r\n+    const companyData = await fetchCompanyDataByID(companyId);\r\n+\r\n+    // Store only minimal data in localStorage for security\r\n+    localStorage.setItem('user_id', user.uid);\r\n+    localStorage.setItem('company_name', companyData['name'] || 'Unknown');\r\n+\r\n+    return { user, userData, companyData };\r\n+  } catch (error) {\r\n+    console.error('Login failed:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+// Export auth and db for use in other modules\r\n+export { auth, db };\r\n"
                },
                {
                    "date": 1737225618247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n \r\n // Function to fetch company data by company ID\r\n export const fetchCompanyDataByID = async (companyId) => {\r\n   try {\r\n-    const companyDocRef = doc(db, 'company', companyId); // Reference to 'company' document\r\n+    const companyDocRef = doc(db, 'client', companyId); // Reference to 'company' document\r\n     const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n \r\n     if (!companyDoc.exists()) {\r\n       throw new Error(`No company found with ID: ${companyId}`);\r\n@@ -86,90 +86,4 @@\n };\r\n \r\n // Export auth and db for use in other modules\r\n export { auth, db };\r\n-import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\n-import { initializeApp } from 'firebase/app';\r\n-import { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'; // Import Firestore functions\r\n-\r\n-// Firebase configuration\r\n-const firebaseConfig = {\r\n-  apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n-  authDomain: \"datumcorp-aml.firebaseapp.com\",\r\n-  projectId: \"datumcorp-aml\",\r\n-  storageBucket: \"datumcorp-aml.appspot.com\",\r\n-  messagingSenderId: \"710428028162\",\r\n-  appId: \"1:710428028162:web:486e3aad77de49d0d8261b\",\r\n-  measurementId: \"G-KSL9Y2V3HX\"\r\n-};\r\n-\r\n-// Initialize Firebase\r\n-const app = initializeApp(firebaseConfig);\r\n-const auth = getAuth(app);\r\n-const db = getFirestore(app); // Initialize Firestore\r\n-\r\n-// Function to fetch user data by UID\r\n-export const fetchUserDataByUID = async (uid) => {\r\n-  try {\r\n-    const userDocRef = doc(db, 'users', uid); // Reference to the document with the given UID\r\n-    const userDoc = await getDoc(userDocRef); // Fetch the document\r\n-\r\n-    if (!userDoc.exists()) {\r\n-      throw new Error(`No user found with UID: ${uid}`);\r\n-    }\r\n-\r\n-    const userData = userDoc.data(); // Extract data from the document\r\n-    console.log('Fetched user data:', userData);\r\n-    return userData;\r\n-  } catch (error) {\r\n-    console.error('Error fetching user data:', error.message);\r\n-    throw error;\r\n-  }\r\n-};\r\n-\r\n-// Function to fetch company data by company ID\r\n-export const fetchCompanyDataByID = async (companyId) => {\r\n-  try {\r\n-    const companyDocRef = doc(db, 'company', companyId); // Reference to the document in 'company' collection\r\n-    const companyDoc = await getDoc(companyDocRef); // Fetch the document\r\n-\r\n-    if (!companyDoc.exists()) {\r\n-      throw new Error(`No company found with ID: ${companyId}`);\r\n-    }\r\n-\r\n-    const companyData = companyDoc.data(); // Extract data from the document\r\n-    console.log('Fetched company data:', companyData);\r\n-    return companyData;\r\n-  } catch (error) {\r\n-    console.error('Error fetching company data:', error.message);\r\n-    throw error;\r\n-  }\r\n-};\r\n-\r\n-// Function to handle login\r\n-export const loginUser = async (email, password) => {\r\n-  try {\r\n-    // Authenticate the user\r\n-    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n-    const user = userCredential.user;\r\n-\r\n-    // Fetch user data from Firestore using UID\r\n-    const userData = await fetchUserDataByUID(user.uid);\r\n-\r\n-    // Use the company ID from the user data to fetch company data\r\n-    const companyId = userData['company id ']; // Replace with correct field name if necessary\r\n-    const companyData = await fetchCompanyDataByID(companyId);\r\n-\r\n-    // Store user and company data in localStorage\r\n-    localStorage.setItem('client_id', companyId);\r\n-    localStorage.setItem('company_name', companyData['name'] || 'Unknown'); // Adjust field as needed\r\n-    localStorage.setItem('user_id', user.uid);\r\n-\r\n-    return user;\r\n-  } catch (error) {\r\n-    console.error('Login failed:', error.message);\r\n-    throw error;\r\n-  }\r\n-};\r\n-\r\n-// Export auth and db if needed elsewhere\r\n-export { auth, db };\r\n"
                },
                {
                    "date": 1737225965066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,10 @@\n \r\n // Function to fetch company data by company ID\r\n export const fetchCompanyDataByID = async (companyId) => {\r\n   try {\r\n-    const companyDocRef = doc(db, 'client', companyId); // Reference to 'company' document\r\n+    const companyDocRef = doc(db, 'client', companyId); // Reference to 'client' document\r\n+    console.log(`Attempting to fetch client data for company ID: ${companyId}`);\r\n     const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n \r\n     if (!companyDoc.exists()) {\r\n       throw new Error(`No company found with ID: ${companyId}`);\r\n@@ -62,23 +63,29 @@\n     // Authenticate the user\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n     const user = userCredential.user;\r\n \r\n+    if (!user) {\r\n+      throw new Error('Authentication failed.');\r\n+    }\r\n+    console.log('User successfully authenticated:', user.uid);\r\n+\r\n     // Fetch user data from Firestore using UID\r\n     const userData = await fetchUserDataByUID(user.uid);\r\n \r\n     // Fetch company data using the 'company id' field in the user document\r\n-    const companyId = userData['company id ']; // Ensure this field exists in Firestore\r\n+    const companyId = userData['company id']; // Ensure this field exists in Firestore\r\n     if (!companyId) {\r\n       throw new Error('Company ID not found in user data.');\r\n     }\r\n \r\n     const companyData = await fetchCompanyDataByID(companyId);\r\n \r\n     // Store only minimal data in localStorage for security\r\n-    localStorage.setItem('user_id', user.uid);\r\n-    localStorage.setItem('company_name', companyData['name'] || 'Unknown');\r\n+    localStorage.setItem('user_id', user.uid); // Store user ID\r\n+    localStorage.setItem('company_name', companyData['name'] || 'Unknown'); // Store company name if available\r\n \r\n+    console.log('Login process completed successfully.');\r\n     return { user, userData, companyData };\r\n   } catch (error) {\r\n     console.error('Login failed:', error.message);\r\n     throw error;\r\n"
                },
                {
                    "date": 1737226352524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,64 +1,4 @@\n-import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\n-import { initializeApp } from 'firebase/app';\r\n-import { getFirestore, doc, getDoc } from 'firebase/firestore'; // Import Firestore functions\r\n-\r\n-// Firebase configuration\r\n-const firebaseConfig = {\r\n-  apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n-  authDomain: \"datumcorp-aml.firebaseapp.com\",\r\n-  projectId: \"datumcorp-aml\",\r\n-  storageBucket: \"datumcorp-aml.appspot.com\",\r\n-  messagingSenderId: \"710428028162\",\r\n-  appId: \"1:710428028162:web:486e3aad77de49d0d8261b\",\r\n-  measurementId: \"G-KSL9Y2V3HX\",\r\n-};\r\n-\r\n-// Initialize Firebase\r\n-const app = initializeApp(firebaseConfig);\r\n-const auth = getAuth(app);\r\n-const db = getFirestore(app); // Initialize Firestore\r\n-\r\n-// Function to fetch user data by UID\r\n-export const fetchUserDataByUID = async (uid) => {\r\n-  try {\r\n-    const userDocRef = doc(db, 'users', uid); // Reference to 'users' document\r\n-    const userDoc = await getDoc(userDocRef); // Fetch user document\r\n-\r\n-    if (!userDoc.exists()) {\r\n-      throw new Error(`No user found with UID: ${uid}`);\r\n-    }\r\n-\r\n-    const userData = userDoc.data(); // Extract data from the user document\r\n-    console.log('Fetched user data:', userData);\r\n-    return userData;\r\n-  } catch (error) {\r\n-    console.error('Error fetching user data:', error.message);\r\n-    throw error;\r\n-  }\r\n-};\r\n-\r\n-// Function to fetch company data by company ID\r\n-export const fetchCompanyDataByID = async (companyId) => {\r\n-  try {\r\n-    const companyDocRef = doc(db, 'client', companyId); // Reference to 'client' document\r\n-    console.log(`Attempting to fetch client data for company ID: ${companyId}`);\r\n-    const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n-\r\n-    if (!companyDoc.exists()) {\r\n-      throw new Error(`No company found with ID: ${companyId}`);\r\n-    }\r\n-\r\n-    const companyData = companyDoc.data(); // Extract data from the company document\r\n-    console.log('Fetched company data:', companyData);\r\n-    return companyData;\r\n-  } catch (error) {\r\n-    console.error('Error fetching company data:', error.message);\r\n-    throw error;\r\n-  }\r\n-};\r\n-\r\n-// Function to handle login and fetch related data\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n     // Authenticate the user\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n@@ -72,11 +12,14 @@\n     // Fetch user data from Firestore using UID\r\n     const userData = await fetchUserDataByUID(user.uid);\r\n \r\n     // Fetch company data using the 'company id' field in the user document\r\n-    const companyId = userData['company id']; // Ensure this field exists in Firestore\r\n+    const companyId = userData['company id'];\r\n     if (!companyId) {\r\n-      throw new Error('Company ID not found in user data.');\r\n+      console.warn('Company ID is missing for user:', user.uid);\r\n+      console.log('Fetched user data:', userData); // Log user data for debugging\r\n+      // Handle missing company ID (e.g., return partial data or fallback to a default value)\r\n+      return { user, userData, companyData: null };\r\n     }\r\n \r\n     const companyData = await fetchCompanyDataByID(companyId);\r\n \r\n@@ -90,7 +33,4 @@\n     console.error('Login failed:', error.message);\r\n     throw error;\r\n   }\r\n };\r\n-\r\n-// Export auth and db for use in other modules\r\n-export { auth, db };\r\n"
                },
                {
                    "date": 1737226365444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,64 @@\n+import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\n+import { initializeApp } from 'firebase/app';\r\n+import { getFirestore, doc, getDoc } from 'firebase/firestore'; // Import Firestore functions\r\n+\r\n+// Firebase configuration\r\n+const firebaseConfig = {\r\n+  apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n+  authDomain: \"datumcorp-aml.firebaseapp.com\",\r\n+  projectId: \"datumcorp-aml\",\r\n+  storageBucket: \"datumcorp-aml.appspot.com\",\r\n+  messagingSenderId: \"710428028162\",\r\n+  appId: \"1:710428028162:web:486e3aad77de49d0d8261b\",\r\n+  measurementId: \"G-KSL9Y2V3HX\",\r\n+};\r\n+\r\n+// Initialize Firebase\r\n+const app = initializeApp(firebaseConfig);\r\n+const auth = getAuth(app);\r\n+const db = getFirestore(app); // Initialize Firestore\r\n+\r\n+// Function to fetch user data by UID\r\n+export const fetchUserDataByUID = async (uid) => {\r\n+  try {\r\n+    const userDocRef = doc(db, 'users', uid); // Reference to 'users' document\r\n+    const userDoc = await getDoc(userDocRef); // Fetch user document\r\n+\r\n+    if (!userDoc.exists()) {\r\n+      throw new Error(`No user found with UID: ${uid}`);\r\n+    }\r\n+\r\n+    const userData = userDoc.data(); // Extract data from the user document\r\n+    console.log('Fetched user data:', userData);\r\n+    return userData;\r\n+  } catch (error) {\r\n+    console.error('Error fetching user data:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+// Function to fetch company data by company ID\r\n+export const fetchCompanyDataByID = async (companyId) => {\r\n+  try {\r\n+    const companyDocRef = doc(db, 'client', companyId); // Reference to 'client' document\r\n+    console.log(`Attempting to fetch client data for company ID: ${companyId}`);\r\n+    const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n+\r\n+    if (!companyDoc.exists()) {\r\n+      throw new Error(`No company found with ID: ${companyId}`);\r\n+    }\r\n+\r\n+    const companyData = companyDoc.data(); // Extract data from the company document\r\n+    console.log('Fetched company data:', companyData);\r\n+    return companyData;\r\n+  } catch (error) {\r\n+    console.error('Error fetching company data:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+// Function to handle login and fetch related data\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n     // Authenticate the user\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n@@ -12,14 +72,11 @@\n     // Fetch user data from Firestore using UID\r\n     const userData = await fetchUserDataByUID(user.uid);\r\n \r\n     // Fetch company data using the 'company id' field in the user document\r\n-    const companyId = userData['company id'];\r\n+    const companyId = userData['company id']; // Ensure this field exists in Firestore\r\n     if (!companyId) {\r\n-      console.warn('Company ID is missing for user:', user.uid);\r\n-      console.log('Fetched user data:', userData); // Log user data for debugging\r\n-      // Handle missing company ID (e.g., return partial data or fallback to a default value)\r\n-      return { user, userData, companyData: null };\r\n+      throw new Error('Company ID not found in user data.');\r\n     }\r\n \r\n     const companyData = await fetchCompanyDataByID(companyId);\r\n \r\n@@ -33,4 +90,7 @@\n     console.error('Login failed:', error.message);\r\n     throw error;\r\n   }\r\n };\r\n+\r\n+// Export auth and db for use in other modules\r\n+export { auth, db };\r\n"
                },
                {
                    "date": 1737228246201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,64 +1,4 @@\n-import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\n-import { initializeApp } from 'firebase/app';\r\n-import { getFirestore, doc, getDoc } from 'firebase/firestore'; // Import Firestore functions\r\n-\r\n-// Firebase configuration\r\n-const firebaseConfig = {\r\n-  apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n-  authDomain: \"datumcorp-aml.firebaseapp.com\",\r\n-  projectId: \"datumcorp-aml\",\r\n-  storageBucket: \"datumcorp-aml.appspot.com\",\r\n-  messagingSenderId: \"710428028162\",\r\n-  appId: \"1:710428028162:web:486e3aad77de49d0d8261b\",\r\n-  measurementId: \"G-KSL9Y2V3HX\",\r\n-};\r\n-\r\n-// Initialize Firebase\r\n-const app = initializeApp(firebaseConfig);\r\n-const auth = getAuth(app);\r\n-const db = getFirestore(app); // Initialize Firestore\r\n-\r\n-// Function to fetch user data by UID\r\n-export const fetchUserDataByUID = async (uid) => {\r\n-  try {\r\n-    const userDocRef = doc(db, 'users', uid); // Reference to 'users' document\r\n-    const userDoc = await getDoc(userDocRef); // Fetch user document\r\n-\r\n-    if (!userDoc.exists()) {\r\n-      throw new Error(`No user found with UID: ${uid}`);\r\n-    }\r\n-\r\n-    const userData = userDoc.data(); // Extract data from the user document\r\n-    console.log('Fetched user data:', userData);\r\n-    return userData;\r\n-  } catch (error) {\r\n-    console.error('Error fetching user data:', error.message);\r\n-    throw error;\r\n-  }\r\n-};\r\n-\r\n-// Function to fetch company data by company ID\r\n-export const fetchCompanyDataByID = async (companyId) => {\r\n-  try {\r\n-    const companyDocRef = doc(db, 'client', companyId); // Reference to 'client' document\r\n-    console.log(`Attempting to fetch client data for company ID: ${companyId}`);\r\n-    const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n-\r\n-    if (!companyDoc.exists()) {\r\n-      throw new Error(`No company found with ID: ${companyId}`);\r\n-    }\r\n-\r\n-    const companyData = companyDoc.data(); // Extract data from the company document\r\n-    console.log('Fetched company data:', companyData);\r\n-    return companyData;\r\n-  } catch (error) {\r\n-    console.error('Error fetching company data:', error.message);\r\n-    throw error;\r\n-  }\r\n-};\r\n-\r\n-// Function to handle login and fetch related data\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n     // Authenticate the user\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n@@ -71,12 +11,20 @@\n \r\n     // Fetch user data from Firestore using UID\r\n     const userData = await fetchUserDataByUID(user.uid);\r\n \r\n+    // Ensure userData is valid and contains the necessary fields\r\n+    if (!userData || typeof userData !== 'object') {\r\n+      throw new Error('User data is missing or invalid.');\r\n+    }\r\n+\r\n     // Fetch company data using the 'company id' field in the user document\r\n-    const companyId = userData['company id']; // Ensure this field exists in Firestore\r\n+    const companyId = userData['company id'];\r\n     if (!companyId) {\r\n-      throw new Error('Company ID not found in user data.');\r\n+      console.warn('Company ID is missing for user:', user.uid);\r\n+      console.log('Fetched user data:', userData); // Log user data for debugging\r\n+      // Handle missing company ID (e.g., return partial data or fallback to a default value)\r\n+      return { user, userData, companyData: null };\r\n     }\r\n \r\n     const companyData = await fetchCompanyDataByID(companyId);\r\n \r\n@@ -90,7 +38,4 @@\n     console.error('Login failed:', error.message);\r\n     throw error;\r\n   }\r\n };\r\n-\r\n-// Export auth and db for use in other modules\r\n-export { auth, db };\r\n"
                },
                {
                    "date": 1737228258073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,64 @@\n+import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\n+import { initializeApp } from 'firebase/app';\r\n+import { getFirestore, doc, getDoc } from 'firebase/firestore'; // Import Firestore functions\r\n+\r\n+// Firebase configuration\r\n+const firebaseConfig = {\r\n+  apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n+  authDomain: \"datumcorp-aml.firebaseapp.com\",\r\n+  projectId: \"datumcorp-aml\",\r\n+  storageBucket: \"datumcorp-aml.appspot.com\",\r\n+  messagingSenderId: \"710428028162\",\r\n+  appId: \"1:710428028162:web:486e3aad77de49d0d8261b\",\r\n+  measurementId: \"G-KSL9Y2V3HX\",\r\n+};\r\n+\r\n+// Initialize Firebase\r\n+const app = initializeApp(firebaseConfig);\r\n+const auth = getAuth(app);\r\n+const db = getFirestore(app); // Initialize Firestore\r\n+\r\n+// Function to fetch user data by UID\r\n+export const fetchUserDataByUID = async (uid) => {\r\n+  try {\r\n+    const userDocRef = doc(db, 'users', uid); // Reference to 'users' document\r\n+    const userDoc = await getDoc(userDocRef); // Fetch user document\r\n+\r\n+    if (!userDoc.exists()) {\r\n+      throw new Error(`No user found with UID: ${uid}`);\r\n+    }\r\n+\r\n+    const userData = userDoc.data(); // Extract data from the user document\r\n+    console.log('Fetched user data:', userData);\r\n+    return userData;\r\n+  } catch (error) {\r\n+    console.error('Error fetching user data:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+// Function to fetch company data by company ID\r\n+export const fetchCompanyDataByID = async (companyId) => {\r\n+  try {\r\n+    const companyDocRef = doc(db, 'client', companyId); // Reference to 'client' document\r\n+    console.log(`Attempting to fetch client data for company ID: ${companyId}`);\r\n+    const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n+\r\n+    if (!companyDoc.exists()) {\r\n+      throw new Error(`No company found with ID: ${companyId}`);\r\n+    }\r\n+\r\n+    const companyData = companyDoc.data(); // Extract data from the company document\r\n+    console.log('Fetched company data:', companyData);\r\n+    return companyData;\r\n+  } catch (error) {\r\n+    console.error('Error fetching company data:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+// Function to handle login and fetch related data\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n     // Authenticate the user\r\n     const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n@@ -11,20 +71,12 @@\n \r\n     // Fetch user data from Firestore using UID\r\n     const userData = await fetchUserDataByUID(user.uid);\r\n \r\n-    // Ensure userData is valid and contains the necessary fields\r\n-    if (!userData || typeof userData !== 'object') {\r\n-      throw new Error('User data is missing or invalid.');\r\n-    }\r\n-\r\n     // Fetch company data using the 'company id' field in the user document\r\n-    const companyId = userData['company id'];\r\n+    const companyId = userData['company id']; // Ensure this field exists in Firestore\r\n     if (!companyId) {\r\n-      console.warn('Company ID is missing for user:', user.uid);\r\n-      console.log('Fetched user data:', userData); // Log user data for debugging\r\n-      // Handle missing company ID (e.g., return partial data or fallback to a default value)\r\n-      return { user, userData, companyData: null };\r\n+      throw new Error('Company ID not found in user data.');\r\n     }\r\n \r\n     const companyData = await fetchCompanyDataByID(companyId);\r\n \r\n@@ -38,4 +90,7 @@\n     console.error('Login failed:', error.message);\r\n     throw error;\r\n   }\r\n };\r\n+\r\n+// Export auth and db for use in other modules\r\n+export { auth, db };\r\n"
                },
                {
                    "date": 1737228409074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,13 +79,9 @@\n     }\r\n \r\n     const companyData = await fetchCompanyDataByID(companyId);\r\n \r\n-    // Store only minimal data in localStorage for security\r\n-    localStorage.setItem('user_id', user.uid); // Store user ID\r\n-    localStorage.setItem('company_name', companyData['name'] || 'Unknown'); // Store company name if available\r\n-\r\n-    console.log('Login process completed successfully.');\r\n+    // Return user and company data for further use\r\n     return { user, userData, companyData };\r\n   } catch (error) {\r\n     console.error('Login failed:', error.message);\r\n     throw error;\r\n"
                },
                {
                    "date": 1737229010892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,14 +71,20 @@\n \r\n     // Fetch user data from Firestore using UID\r\n     const userData = await fetchUserDataByUID(user.uid);\r\n \r\n-    // Fetch company data using the 'company id' field in the user document\r\n+    // Log the fetched user data to confirm the structure\r\n+    console.log('Fetched user data:', userData);\r\n+\r\n+    // Check if 'company id' exists in the user data\r\n     const companyId = userData['company id']; // Ensure this field exists in Firestore\r\n     if (!companyId) {\r\n       throw new Error('Company ID not found in user data.');\r\n     }\r\n \r\n+    console.log('Company ID found:', companyId);\r\n+\r\n+    // Fetch company data using the 'company id'\r\n     const companyData = await fetchCompanyDataByID(companyId);\r\n \r\n     // Return user and company data for further use\r\n     return { user, userData, companyData };\r\n@@ -86,7 +92,44 @@\n     console.error('Login failed:', error.message);\r\n     throw error;\r\n   }\r\n };\r\n+// Function to handle login and fetch related data\r\n+export const loginUser = async (email, password) => {\r\n+  try {\r\n+    // Authenticate the user\r\n+    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n+    const user = userCredential.user;\r\n \r\n+    if (!user) {\r\n+      throw new Error('Authentication failed.');\r\n+    }\r\n+    console.log('User successfully authenticated:', user.uid);\r\n+\r\n+    // Fetch user data from Firestore using UID\r\n+    const userData = await fetchUserDataByUID(user.uid);\r\n+\r\n+    // Log the fetched user data to confirm the structure\r\n+    console.log('Fetched user data:', userData);\r\n+\r\n+    // Check if 'company id' exists in the user data\r\n+    const companyId = userData['company id']; // Ensure this field exists in Firestore\r\n+    if (!companyId) {\r\n+      throw new Error('Company ID not found in user data.');\r\n+    }\r\n+\r\n+    console.log('Company ID found:', companyId);\r\n+\r\n+    // Fetch company data using the 'company id'\r\n+    const companyData = await fetchCompanyDataByID(companyId);\r\n+\r\n+    // Return user and company data for further use\r\n+    return { user, userData, companyData };\r\n+  } catch (error) {\r\n+    console.error('Login failed:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+\r\n // Export auth and db for use in other modules\r\n export { auth, db };\r\n"
                },
                {
                    "date": 1737229090957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,44 +92,7 @@\n     console.error('Login failed:', error.message);\r\n     throw error;\r\n   }\r\n };\r\n-// Function to handle login and fetch related data\r\n-export const loginUser = async (email, password) => {\r\n-  try {\r\n-    // Authenticate the user\r\n-    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n-    const user = userCredential.user;\r\n \r\n-    if (!user) {\r\n-      throw new Error('Authentication failed.');\r\n-    }\r\n-    console.log('User successfully authenticated:', user.uid);\r\n-\r\n-    // Fetch user data from Firestore using UID\r\n-    const userData = await fetchUserDataByUID(user.uid);\r\n-\r\n-    // Log the fetched user data to confirm the structure\r\n-    console.log('Fetched user data:', userData);\r\n-\r\n-    // Check if 'company id' exists in the user data\r\n-    const companyId = userData['company id']; // Ensure this field exists in Firestore\r\n-    if (!companyId) {\r\n-      throw new Error('Company ID not found in user data.');\r\n-    }\r\n-\r\n-    console.log('Company ID found:', companyId);\r\n-\r\n-    // Fetch company data using the 'company id'\r\n-    const companyData = await fetchCompanyDataByID(companyId);\r\n-\r\n-    // Return user and company data for further use\r\n-    return { user, userData, companyData };\r\n-  } catch (error) {\r\n-    console.error('Login failed:', error.message);\r\n-    throw error;\r\n-  }\r\n-};\r\n-\r\n-\r\n // Export auth and db for use in other modules\r\n export { auth, db };\r\n"
                },
                {
                    "date": 1737229171735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,28 +36,10 @@\n     throw error;\r\n   }\r\n };\r\n \r\n-// Function to fetch company data by company ID\r\n-export const fetchCompanyDataByID = async (companyId) => {\r\n-  try {\r\n-    const companyDocRef = doc(db, 'client', companyId); // Reference to 'client' document\r\n-    console.log(`Attempting to fetch client data for company ID: ${companyId}`);\r\n-    const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n \r\n-    if (!companyDoc.exists()) {\r\n-      throw new Error(`No company found with ID: ${companyId}`);\r\n-    }\r\n \r\n-    const companyData = companyDoc.data(); // Extract data from the company document\r\n-    console.log('Fetched company data:', companyData);\r\n-    return companyData;\r\n-  } catch (error) {\r\n-    console.error('Error fetching company data:', error.message);\r\n-    throw error;\r\n-  }\r\n-};\r\n-\r\n // Function to handle login and fetch related data\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n     // Authenticate the user\r\n@@ -93,6 +75,26 @@\n     throw error;\r\n   }\r\n };\r\n \r\n+// Function to fetch company data by company ID\r\n+export const fetchCompanyDataByID = async (companyId) => {\r\n+  try {\r\n+    const companyDocRef = doc(db, 'client', companyId); // Reference to 'client' document\r\n+    console.log(`Attempting to fetch client data for company ID: ${companyId}`);\r\n+    const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n+\r\n+    if (!companyDoc.exists()) {\r\n+      throw new Error(`No company found with ID: ${companyId}`);\r\n+    }\r\n+\r\n+    const companyData = companyDoc.data(); // Extract data from the company document\r\n+    console.log('Fetched company data:', companyData);\r\n+    return companyData;\r\n+  } catch (error) {\r\n+    console.error('Error fetching company data:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n // Export auth and db for use in other modules\r\n export { auth, db };\r\n"
                },
                {
                    "date": 1737229210895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,28 @@\n     throw error;\r\n   }\r\n };\r\n \r\n+// Function to fetch company data by company ID\r\n+export const fetchCompanyDataByID = async (companyId) => {\r\n+  try {\r\n+    const companyDocRef = doc(db, 'client', companyId); // Reference to 'client' document\r\n+    console.log(`Attempting to fetch client data for company ID: ${companyId}`);\r\n+    const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n \r\n+    if (!companyDoc.exists()) {\r\n+      throw new Error(`No company found with ID: ${companyId}`);\r\n+    }\r\n \r\n+    const companyData = companyDoc.data(); // Extract data from the company document\r\n+    console.log('Fetched company data:', companyData);\r\n+    return companyData;\r\n+  } catch (error) {\r\n+    console.error('Error fetching company data:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n // Function to handle login and fetch related data\r\n export const loginUser = async (email, password) => {\r\n   try {\r\n     // Authenticate the user\r\n@@ -75,26 +93,6 @@\n     throw error;\r\n   }\r\n };\r\n \r\n-// Function to fetch company data by company ID\r\n-export const fetchCompanyDataByID = async (companyId) => {\r\n-  try {\r\n-    const companyDocRef = doc(db, 'client', companyId); // Reference to 'client' document\r\n-    console.log(`Attempting to fetch client data for company ID: ${companyId}`);\r\n-    const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n-\r\n-    if (!companyDoc.exists()) {\r\n-      throw new Error(`No company found with ID: ${companyId}`);\r\n-    }\r\n-\r\n-    const companyData = companyDoc.data(); // Extract data from the company document\r\n-    console.log('Fetched company data:', companyData);\r\n-    return companyData;\r\n-  } catch (error) {\r\n-    console.error('Error fetching company data:', error.message);\r\n-    throw error;\r\n-  }\r\n-};\r\n-\r\n // Export auth and db for use in other modules\r\n export { auth, db };\r\n"
                },
                {
                    "date": 1737230911789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,10 +74,10 @@\n \r\n     // Log the fetched user data to confirm the structure\r\n     console.log('Fetched user data:', userData);\r\n \r\n-    // Check if 'company id' exists in the user data\r\n-    const companyId = userData['company id']; // Ensure this field exists in Firestore\r\n+    // Check if 'company' field exists in the user data\r\n+    const companyId = userData.company; // Ensure this field exists in Firestore, not 'company id'\r\n     if (!companyId) {\r\n       throw new Error('Company ID not found in user data.');\r\n     }\r\n \r\n"
                },
                {
                    "date": 1737231116235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n     // Log the fetched user data to confirm the structure\r\n     console.log('Fetched user data:', userData);\r\n \r\n     // Check if 'company' field exists in the user data\r\n-    const companyId = userData.company; // Ensure this field exists in Firestore, not 'company id'\r\n+    const companyId = userData['company id']; // Ensure this field exists in Firestore, not 'company id'\r\n     if (!companyId) {\r\n       throw new Error('Company ID not found in user data.');\r\n     }\r\n \r\n"
                },
                {
                    "date": 1737231135762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n \r\n // Function to fetch company data by company ID\r\n export const fetchCompanyDataByID = async (companyId) => {\r\n   try {\r\n-    const companyDocRef = doc(db, 'client', companyId); // Reference to 'client' document\r\n+    const companyDocRef = doc(db, 'client', ['company id']); // Reference to 'client' document\r\n     console.log(`Attempting to fetch client data for company ID: ${companyId}`);\r\n     const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n \r\n     if (!companyDoc.exists()) {\r\n"
                },
                {
                    "date": 1737231153363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n \r\n // Function to fetch company data by company ID\r\n export const fetchCompanyDataByID = async (companyId) => {\r\n   try {\r\n-    const companyDocRef = doc(db, 'client', ['company id']); // Reference to 'client' document\r\n+    const companyDocRef = doc(db, 'client', companyId); // Reference to 'client' document\r\n     console.log(`Attempting to fetch client data for company ID: ${companyId}`);\r\n     const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n \r\n     if (!companyDoc.exists()) {\r\n"
                },
                {
                    "date": 1737231462286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,6 +93,10 @@\n     throw error;\r\n   }\r\n };\r\n \r\n+// store minimal data in localStorage\r\n+localStorage.setItem('user_id', user.uid); // Store user ID\r\n+localStorage.setItem('company_name', companyData['company name'] || 'Unknown'); // Store company name if available\r\n+\r\n // Export auth and db for use in other modules\r\n export { auth, db };\r\n"
                },
                {
                    "date": 1737231523919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n \r\n     if (!userDoc.exists()) {\r\n       throw new Error(`No user found with UID: ${uid}`);\r\n     }\r\n-\r\n+    localStorage.setItem('user_id', userDoc.uid); // Store user ID\r\n     const userData = userDoc.data(); // Extract data from the user document\r\n     console.log('Fetched user data:', userData);\r\n     return userData;\r\n   } catch (error) {\r\n@@ -94,9 +94,9 @@\n   }\r\n };\r\n \r\n // store minimal data in localStorage\r\n-localStorage.setItem('user_id', user.uid); // Store user ID\r\n+\r\n localStorage.setItem('company_name', companyData['company name'] || 'Unknown'); // Store company name if available\r\n \r\n // Export auth and db for use in other modules\r\n export { auth, db };\r\n"
                },
                {
                    "date": 1737231563986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,12 @@\n     if (!companyDoc.exists()) {\r\n       throw new Error(`No company found with ID: ${companyId}`);\r\n     }\r\n \r\n+\r\n+    localStorage.setItem('company_name', companyDoc['company name'] || 'Unknown'); // Store company name if available\r\n+\r\n+\r\n     const companyData = companyDoc.data(); // Extract data from the company document\r\n     console.log('Fetched company data:', companyData);\r\n     return companyData;\r\n   } catch (error) {\r\n@@ -95,8 +99,8 @@\n };\r\n \r\n // store minimal data in localStorage\r\n \r\n-localStorage.setItem('company_name', companyData['company name'] || 'Unknown'); // Store company name if available\r\n \r\n+\r\n // Export auth and db for use in other modules\r\n export { auth, db };\r\n"
                },
                {
                    "date": 1737231642745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,14 @@\n \r\n     if (!userDoc.exists()) {\r\n       throw new Error(`No user found with UID: ${uid}`);\r\n     }\r\n-    localStorage.setItem('user_id', userDoc.uid); // Store user ID\r\n+    \r\n     const userData = userDoc.data(); // Extract data from the user document\r\n+\r\n+    localStorage.setItem('user_id', userData.uid); // Store user ID in localStorage\r\n+    localStorage.setItem('user_id', userData.name); // Store user name in localStorage\r\n+\r\n     console.log('Fetched user data:', userData);\r\n     return userData;\r\n   } catch (error) {\r\n     console.error('Error fetching user data:', error.message);\r\n"
                },
                {
                    "date": 1737231683839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     \r\n     const userData = userDoc.data(); // Extract data from the user document\r\n \r\n     localStorage.setItem('user_id', userData.uid); // Store user ID in localStorage\r\n-    localStorage.setItem('user_id', userData.name); // Store user name in localStorage\r\n+    localStorage.setItem('user_id', userData['user name']); // Store user name in localStorage\r\n \r\n     console.log('Fetched user data:', userData);\r\n     return userData;\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1737231715853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     \r\n     const userData = userDoc.data(); // Extract data from the user document\r\n \r\n     localStorage.setItem('user_id', userData.uid); // Store user ID in localStorage\r\n-    localStorage.setItem('user_id', userData['user name']); // Store user name in localStorage\r\n+    localStorage.setItem('user_id', userData['name']); // Store user name in localStorage\r\n \r\n     console.log('Fetched user data:', userData);\r\n     return userData;\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1737231746005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     \r\n     const userData = userDoc.data(); // Extract data from the user document\r\n \r\n     localStorage.setItem('user_id', userData.uid); // Store user ID in localStorage\r\n-    localStorage.setItem('user_id', userData['name']); // Store user name in localStorage\r\n+    localStorage.setItem('user_id', userDoc.name); // Store user name in localStorage\r\n \r\n     console.log('Fetched user data:', userData);\r\n     return userData;\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1737231847622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,13 @@\n     }\r\n     \r\n     const userData = userDoc.data(); // Extract data from the user document\r\n \r\n+    // Assuming 'user_name' is the field name in Firestore\r\n+    const userName = userData.user_name || 'Unknown User'; // If 'user_name' is missing, default to 'Unknown User'\r\n+\r\n     localStorage.setItem('user_id', userData.uid); // Store user ID in localStorage\r\n-    localStorage.setItem('user_id', userDoc.name); // Store user name in localStorage\r\n+    localStorage.setItem('user_name', userName); // Store user name in localStorage\r\n \r\n     console.log('Fetched user data:', userData);\r\n     return userData;\r\n   } catch (error) {\r\n@@ -51,12 +54,123 @@\n     if (!companyDoc.exists()) {\r\n       throw new Error(`No company found with ID: ${companyId}`);\r\n     }\r\n \r\n+    // Assuming 'company_name' is the field name in Firestore\r\n+    const companyName = companyDoc.data().company_name || 'Unknown'; // If 'company_name' is missing, default to 'Unknown'\r\n+    localStorage.setItem('company_name', companyName); // Store company name if available\r\n \r\n-    localStorage.setItem('company_name', companyDoc['company name'] || 'Unknown'); // Store company name if available\r\n+    const companyData = companyDoc.data(); // Extract data from the company document\r\n+    console.log('Fetched company data:', companyData);\r\n+    return companyData;\r\n+  } catch (error) {\r\n+    console.error('Error fetching company data:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n \r\n+// Function to handle login and fetch related data\r\n+export const loginUser = async (email, password) => {\r\n+  try {\r\n+    // Authenticate the user\r\n+    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n+    const user = userCredential.user;\r\n \r\n+    if (!user) {\r\n+      throw new Error('Authentication failed.');\r\n+    }\r\n+    console.log('User successfully authenticated:', user.uid);\r\n+\r\n+    // Fetch user data from Firestore using UID\r\n+    const userData = await fetchUserDataByUID(user.uid);\r\n+\r\n+    // Log the fetched user data to confirm the structure\r\n+    console.log('Fetched user data:', userData);\r\n+\r\n+    // Check if 'company' field exists in the user data\r\n+    const companyId = userData['company id']; // Ensure this field exists in Firestore, not 'company id'\r\n+    if (!companyId) {\r\n+      throw new Error('Company ID not found in user data.');\r\n+    }\r\n+\r\n+    console.log('Company ID found:', companyId);\r\n+\r\n+    // Fetch company data using the 'company id'\r\n+    const companyData = await fetchCompanyDataByID(companyId);\r\n+\r\n+    // Return user and company data for further use\r\n+    return { user, userData, companyData };\r\n+  } catch (error) {\r\n+    console.error('Login failed:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+// store minimal data in localStorage\r\n+\r\n+// Export auth and db for use in other modules\r\n+export { auth, db };\r\n+import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\n+import { initializeApp } from 'firebase/app';\r\n+import { getFirestore, doc, getDoc } from 'firebase/firestore'; // Import Firestore functions\r\n+\r\n+// Firebase configuration\r\n+const firebaseConfig = {\r\n+  apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n+  authDomain: \"datumcorp-aml.firebaseapp.com\",\r\n+  projectId: \"datumcorp-aml\",\r\n+  storageBucket: \"datumcorp-aml.appspot.com\",\r\n+  messagingSenderId: \"710428028162\",\r\n+  appId: \"1:710428028162:web:486e3aad77de49d0d8261b\",\r\n+  measurementId: \"G-KSL9Y2V3HX\",\r\n+};\r\n+\r\n+// Initialize Firebase\r\n+const app = initializeApp(firebaseConfig);\r\n+const auth = getAuth(app);\r\n+const db = getFirestore(app); // Initialize Firestore\r\n+\r\n+// Function to fetch user data by UID\r\n+export const fetchUserDataByUID = async (uid) => {\r\n+  try {\r\n+    const userDocRef = doc(db, 'users', uid); // Reference to 'users' document\r\n+    const userDoc = await getDoc(userDocRef); // Fetch user document\r\n+\r\n+    if (!userDoc.exists()) {\r\n+      throw new Error(`No user found with UID: ${uid}`);\r\n+    }\r\n+    \r\n+    const userData = userDoc.data(); // Extract data from the user document\r\n+\r\n+    // Assuming 'user_name' is the field name in Firestore\r\n+    const userName = userData.user_name || 'Unknown User'; // If 'user_name' is missing, default to 'Unknown User'\r\n+\r\n+    localStorage.setItem('user_id', userData.uid); // Store user ID in localStorage\r\n+    localStorage.setItem('user_name', userName); // Store user name in localStorage\r\n+\r\n+    console.log('Fetched user data:', userData);\r\n+    return userData;\r\n+  } catch (error) {\r\n+    console.error('Error fetching user data:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+// Function to fetch company data by company ID\r\n+export const fetchCompanyDataByID = async (companyId) => {\r\n+  try {\r\n+    const companyDocRef = doc(db, 'client', companyId); // Reference to 'client' document\r\n+    console.log(`Attempting to fetch client data for company ID: ${companyId}`);\r\n+    const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n+\r\n+    if (!companyDoc.exists()) {\r\n+      throw new Error(`No company found with ID: ${companyId}`);\r\n+    }\r\n+\r\n+    // Assuming 'company_name' is the field name in Firestore\r\n+    const companyName = companyDoc.data().company_name || 'Unknown'; // If 'company_name' is missing, default to 'Unknown'\r\n+    localStorage.setItem('company_name', companyName); // Store company name if available\r\n+\r\n     const companyData = companyDoc.data(); // Extract data from the company document\r\n     console.log('Fetched company data:', companyData);\r\n     return companyData;\r\n   } catch (error) {\r\n@@ -103,8 +217,117 @@\n };\r\n \r\n // store minimal data in localStorage\r\n \r\n+// Export auth and db for use in other modules\r\n+export { auth, db };\r\n+import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\n+import { initializeApp } from 'firebase/app';\r\n+import { getFirestore, doc, getDoc } from 'firebase/firestore'; // Import Firestore functions\r\n \r\n+// Firebase configuration\r\n+const firebaseConfig = {\r\n+  apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n+  authDomain: \"datumcorp-aml.firebaseapp.com\",\r\n+  projectId: \"datumcorp-aml\",\r\n+  storageBucket: \"datumcorp-aml.appspot.com\",\r\n+  messagingSenderId: \"710428028162\",\r\n+  appId: \"1:710428028162:web:486e3aad77de49d0d8261b\",\r\n+  measurementId: \"G-KSL9Y2V3HX\",\r\n+};\r\n \r\n+// Initialize Firebase\r\n+const app = initializeApp(firebaseConfig);\r\n+const auth = getAuth(app);\r\n+const db = getFirestore(app); // Initialize Firestore\r\n+\r\n+// Function to fetch user data by UID\r\n+export const fetchUserDataByUID = async (uid) => {\r\n+  try {\r\n+    const userDocRef = doc(db, 'users', uid); // Reference to 'users' document\r\n+    const userDoc = await getDoc(userDocRef); // Fetch user document\r\n+\r\n+    if (!userDoc.exists()) {\r\n+      throw new Error(`No user found with UID: ${uid}`);\r\n+    }\r\n+    \r\n+    const userData = userDoc.data(); // Extract data from the user document\r\n+\r\n+    // Assuming 'user_name' is the field name in Firestore\r\n+    const userName = userData.user_name || 'Unknown User'; // If 'user_name' is missing, default to 'Unknown User'\r\n+\r\n+    localStorage.setItem('user_id', userData.uid); // Store user ID in localStorage\r\n+    localStorage.setItem('user_name', userName); // Store user name in localStorage\r\n+\r\n+    console.log('Fetched user data:', userData);\r\n+    return userData;\r\n+  } catch (error) {\r\n+    console.error('Error fetching user data:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+// Function to fetch company data by company ID\r\n+export const fetchCompanyDataByID = async (companyId) => {\r\n+  try {\r\n+    const companyDocRef = doc(db, 'client', companyId); // Reference to 'client' document\r\n+    console.log(`Attempting to fetch client data for company ID: ${companyId}`);\r\n+    const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n+\r\n+    if (!companyDoc.exists()) {\r\n+      throw new Error(`No company found with ID: ${companyId}`);\r\n+    }\r\n+\r\n+    // Assuming 'company_name' is the field name in Firestore\r\n+    const companyName = companyDoc.data().company_name || 'Unknown'; // If 'company_name' is missing, default to 'Unknown'\r\n+    localStorage.setItem('company_name', companyName); // Store company name if available\r\n+\r\n+    const companyData = companyDoc.data(); // Extract data from the company document\r\n+    console.log('Fetched company data:', companyData);\r\n+    return companyData;\r\n+  } catch (error) {\r\n+    console.error('Error fetching company data:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+// Function to handle login and fetch related data\r\n+export const loginUser = async (email, password) => {\r\n+  try {\r\n+    // Authenticate the user\r\n+    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n+    const user = userCredential.user;\r\n+\r\n+    if (!user) {\r\n+      throw new Error('Authentication failed.');\r\n+    }\r\n+    console.log('User successfully authenticated:', user.uid);\r\n+\r\n+    // Fetch user data from Firestore using UID\r\n+    const userData = await fetchUserDataByUID(user.uid);\r\n+\r\n+    // Log the fetched user data to confirm the structure\r\n+    console.log('Fetched user data:', userData);\r\n+\r\n+    // Check if 'company' field exists in the user data\r\n+    const companyId = userData['company id']; // Ensure this field exists in Firestore, not 'company id'\r\n+    if (!companyId) {\r\n+      throw new Error('Company ID not found in user data.');\r\n+    }\r\n+\r\n+    console.log('Company ID found:', companyId);\r\n+\r\n+    // Fetch company data using the 'company id'\r\n+    const companyData = await fetchCompanyDataByID(companyId);\r\n+\r\n+    // Return user and company data for further use\r\n+    return { user, userData, companyData };\r\n+  } catch (error) {\r\n+    console.error('Login failed:', error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+// store minimal data in localStorage\r\n+\r\n // Export auth and db for use in other modules\r\n export { auth, db };\r\n"
                },
                {
                    "date": 1737231986433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,227 +107,5 @@\n \r\n // store minimal data in localStorage\r\n \r\n // Export auth and db for use in other modules\r\n-export { auth, db };\r\n-import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\n-import { initializeApp } from 'firebase/app';\r\n-import { getFirestore, doc, getDoc } from 'firebase/firestore'; // Import Firestore functions\r\n-\r\n-// Firebase configuration\r\n-const firebaseConfig = {\r\n-  apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n-  authDomain: \"datumcorp-aml.firebaseapp.com\",\r\n-  projectId: \"datumcorp-aml\",\r\n-  storageBucket: \"datumcorp-aml.appspot.com\",\r\n-  messagingSenderId: \"710428028162\",\r\n-  appId: \"1:710428028162:web:486e3aad77de49d0d8261b\",\r\n-  measurementId: \"G-KSL9Y2V3HX\",\r\n-};\r\n-\r\n-// Initialize Firebase\r\n-const app = initializeApp(firebaseConfig);\r\n-const auth = getAuth(app);\r\n-const db = getFirestore(app); // Initialize Firestore\r\n-\r\n-// Function to fetch user data by UID\r\n-export const fetchUserDataByUID = async (uid) => {\r\n-  try {\r\n-    const userDocRef = doc(db, 'users', uid); // Reference to 'users' document\r\n-    const userDoc = await getDoc(userDocRef); // Fetch user document\r\n-\r\n-    if (!userDoc.exists()) {\r\n-      throw new Error(`No user found with UID: ${uid}`);\r\n-    }\r\n-    \r\n-    const userData = userDoc.data(); // Extract data from the user document\r\n-\r\n-    // Assuming 'user_name' is the field name in Firestore\r\n-    const userName = userData.user_name || 'Unknown User'; // If 'user_name' is missing, default to 'Unknown User'\r\n-\r\n-    localStorage.setItem('user_id', userData.uid); // Store user ID in localStorage\r\n-    localStorage.setItem('user_name', userName); // Store user name in localStorage\r\n-\r\n-    console.log('Fetched user data:', userData);\r\n-    return userData;\r\n-  } catch (error) {\r\n-    console.error('Error fetching user data:', error.message);\r\n-    throw error;\r\n-  }\r\n-};\r\n-\r\n-// Function to fetch company data by company ID\r\n-export const fetchCompanyDataByID = async (companyId) => {\r\n-  try {\r\n-    const companyDocRef = doc(db, 'client', companyId); // Reference to 'client' document\r\n-    console.log(`Attempting to fetch client data for company ID: ${companyId}`);\r\n-    const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n-\r\n-    if (!companyDoc.exists()) {\r\n-      throw new Error(`No company found with ID: ${companyId}`);\r\n-    }\r\n-\r\n-    // Assuming 'company_name' is the field name in Firestore\r\n-    const companyName = companyDoc.data().company_name || 'Unknown'; // If 'company_name' is missing, default to 'Unknown'\r\n-    localStorage.setItem('company_name', companyName); // Store company name if available\r\n-\r\n-    const companyData = companyDoc.data(); // Extract data from the company document\r\n-    console.log('Fetched company data:', companyData);\r\n-    return companyData;\r\n-  } catch (error) {\r\n-    console.error('Error fetching company data:', error.message);\r\n-    throw error;\r\n-  }\r\n-};\r\n-\r\n-// Function to handle login and fetch related data\r\n-export const loginUser = async (email, password) => {\r\n-  try {\r\n-    // Authenticate the user\r\n-    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n-    const user = userCredential.user;\r\n-\r\n-    if (!user) {\r\n-      throw new Error('Authentication failed.');\r\n-    }\r\n-    console.log('User successfully authenticated:', user.uid);\r\n-\r\n-    // Fetch user data from Firestore using UID\r\n-    const userData = await fetchUserDataByUID(user.uid);\r\n-\r\n-    // Log the fetched user data to confirm the structure\r\n-    console.log('Fetched user data:', userData);\r\n-\r\n-    // Check if 'company' field exists in the user data\r\n-    const companyId = userData['company id']; // Ensure this field exists in Firestore, not 'company id'\r\n-    if (!companyId) {\r\n-      throw new Error('Company ID not found in user data.');\r\n-    }\r\n-\r\n-    console.log('Company ID found:', companyId);\r\n-\r\n-    // Fetch company data using the 'company id'\r\n-    const companyData = await fetchCompanyDataByID(companyId);\r\n-\r\n-    // Return user and company data for further use\r\n-    return { user, userData, companyData };\r\n-  } catch (error) {\r\n-    console.error('Login failed:', error.message);\r\n-    throw error;\r\n-  }\r\n-};\r\n-\r\n-// store minimal data in localStorage\r\n-\r\n-// Export auth and db for use in other modules\r\n-export { auth, db };\r\n-import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\n-import { initializeApp } from 'firebase/app';\r\n-import { getFirestore, doc, getDoc } from 'firebase/firestore'; // Import Firestore functions\r\n-\r\n-// Firebase configuration\r\n-const firebaseConfig = {\r\n-  apiKey: \"AIzaSyBfku8hikwXrII_Uv2u0pL6-f0a0a0mKr8\",\r\n-  authDomain: \"datumcorp-aml.firebaseapp.com\",\r\n-  projectId: \"datumcorp-aml\",\r\n-  storageBucket: \"datumcorp-aml.appspot.com\",\r\n-  messagingSenderId: \"710428028162\",\r\n-  appId: \"1:710428028162:web:486e3aad77de49d0d8261b\",\r\n-  measurementId: \"G-KSL9Y2V3HX\",\r\n-};\r\n-\r\n-// Initialize Firebase\r\n-const app = initializeApp(firebaseConfig);\r\n-const auth = getAuth(app);\r\n-const db = getFirestore(app); // Initialize Firestore\r\n-\r\n-// Function to fetch user data by UID\r\n-export const fetchUserDataByUID = async (uid) => {\r\n-  try {\r\n-    const userDocRef = doc(db, 'users', uid); // Reference to 'users' document\r\n-    const userDoc = await getDoc(userDocRef); // Fetch user document\r\n-\r\n-    if (!userDoc.exists()) {\r\n-      throw new Error(`No user found with UID: ${uid}`);\r\n-    }\r\n-    \r\n-    const userData = userDoc.data(); // Extract data from the user document\r\n-\r\n-    // Assuming 'user_name' is the field name in Firestore\r\n-    const userName = userData.user_name || 'Unknown User'; // If 'user_name' is missing, default to 'Unknown User'\r\n-\r\n-    localStorage.setItem('user_id', userData.uid); // Store user ID in localStorage\r\n-    localStorage.setItem('user_name', userName); // Store user name in localStorage\r\n-\r\n-    console.log('Fetched user data:', userData);\r\n-    return userData;\r\n-  } catch (error) {\r\n-    console.error('Error fetching user data:', error.message);\r\n-    throw error;\r\n-  }\r\n-};\r\n-\r\n-// Function to fetch company data by company ID\r\n-export const fetchCompanyDataByID = async (companyId) => {\r\n-  try {\r\n-    const companyDocRef = doc(db, 'client', companyId); // Reference to 'client' document\r\n-    console.log(`Attempting to fetch client data for company ID: ${companyId}`);\r\n-    const companyDoc = await getDoc(companyDocRef); // Fetch company document\r\n-\r\n-    if (!companyDoc.exists()) {\r\n-      throw new Error(`No company found with ID: ${companyId}`);\r\n-    }\r\n-\r\n-    // Assuming 'company_name' is the field name in Firestore\r\n-    const companyName = companyDoc.data().company_name || 'Unknown'; // If 'company_name' is missing, default to 'Unknown'\r\n-    localStorage.setItem('company_name', companyName); // Store company name if available\r\n-\r\n-    const companyData = companyDoc.data(); // Extract data from the company document\r\n-    console.log('Fetched company data:', companyData);\r\n-    return companyData;\r\n-  } catch (error) {\r\n-    console.error('Error fetching company data:', error.message);\r\n-    throw error;\r\n-  }\r\n-};\r\n-\r\n-// Function to handle login and fetch related data\r\n-export const loginUser = async (email, password) => {\r\n-  try {\r\n-    // Authenticate the user\r\n-    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n-    const user = userCredential.user;\r\n-\r\n-    if (!user) {\r\n-      throw new Error('Authentication failed.');\r\n-    }\r\n-    console.log('User successfully authenticated:', user.uid);\r\n-\r\n-    // Fetch user data from Firestore using UID\r\n-    const userData = await fetchUserDataByUID(user.uid);\r\n-\r\n-    // Log the fetched user data to confirm the structure\r\n-    console.log('Fetched user data:', userData);\r\n-\r\n-    // Check if 'company' field exists in the user data\r\n-    const companyId = userData['company id']; // Ensure this field exists in Firestore, not 'company id'\r\n-    if (!companyId) {\r\n-      throw new Error('Company ID not found in user data.');\r\n-    }\r\n-\r\n-    console.log('Company ID found:', companyId);\r\n-\r\n-    // Fetch company data using the 'company id'\r\n-    const companyData = await fetchCompanyDataByID(companyId);\r\n-\r\n-    // Return user and company data for further use\r\n-    return { user, userData, companyData };\r\n-  } catch (error) {\r\n-    console.error('Login failed:', error.message);\r\n-    throw error;\r\n-  }\r\n-};\r\n-\r\n-// store minimal data in localStorage\r\n-\r\n-// Export auth and db for use in other modules\r\n-export { auth, db };\r\n+export { auth, db };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737232170237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,10 @@\n     }\r\n     \r\n     const userData = userDoc.data(); // Extract data from the user document\r\n \r\n-    // Assuming 'user_name' is the field name in Firestore\r\n-    const userName = userData.user_name || 'Unknown User'; // If 'user_name' is missing, default to 'Unknown User'\r\n+    // Fetch 'name' field from user document\r\n+    const userName = userData.name || 'Unknown User'; // Default to 'Unknown User' if name doesn't exist\r\n \r\n     localStorage.setItem('user_id', userData.uid); // Store user ID in localStorage\r\n     localStorage.setItem('user_name', userName); // Store user name in localStorage\r\n \r\n@@ -107,5 +107,5 @@\n \r\n // store minimal data in localStorage\r\n \r\n // Export auth and db for use in other modules\r\n-export { auth, db };\n\\ No newline at end of file\n+export { auth, db };\r\n"
                }
            ],
            "date": 1736966845685,
            "name": "Commit-0",
            "content": "// auth.js\r\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, sendEmailVerification } from \"firebase/auth\";\r\n\r\n// Allowed email domains\r\nconst allowedDomains = ['sinergi.com', 'datum.com'];\r\n\r\nconst isValidDomain = (email) => {\r\n  const domain = email.split('@')[1];\r\n  return allowedDomains.includes(domain);\r\n};\r\n\r\nexport const handleLogin = async (email, password) => {\r\n  if (!isValidDomain(email)) {\r\n    alert('This email domain is not allowed.');\r\n    return;\r\n  }\r\n\r\n  const auth = getAuth();\r\n  try {\r\n    await signInWithEmailAndPassword(auth, email, password);\r\n  } catch (error) {\r\n    console.error('Login Error:', error.message);\r\n  }\r\n};\r\n\r\nexport const handleSignUp = async (email, password) => {\r\n  if (!isValidDomain(email)) {\r\n    alert('This email domain is not allowed.');\r\n    return;\r\n  }\r\n\r\n  const auth = getAuth();\r\n  try {\r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    await sendEmailVerification(userCredential.user);\r\n    console.log('Verification email sent!');\r\n  } catch (error) {\r\n    console.error('Sign-Up Error:', error.message);\r\n  }\r\n};"
        }
    ]
}